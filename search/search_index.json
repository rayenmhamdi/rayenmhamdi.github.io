{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 These days, it seems whenever technology is mentioned, there are buzzwords to boot like AI , Data Science , Machine Learning , Deep Learning etc... In order to better understand the concepts above, I would like to clarify those words and their connections. Artificial Intelligence \u00b6 Artificial intelligence (AI) is therefore, based on the idea of the capability of a machine or computer program to think(reason), understand and learn like humans. From the definition of intelligence, we can also say that artificial Intelligence is the study of the possibility of creating machines able to apply knowledge received from data in manipulating the environment. In simple terms Artificial Intelligence is reproducing human intelligence in machines, especially computer systems through learning , reasoning and self-correction. Broadly, AI can be thought to have evolved parallelly in two main directions: Expert Systems and ML . Focusing on the latter, ML extracts features from training dataset(s) and make models with minimal or no human intervention. These models provide predicted outputs based on test data. DL , being a sub-division of ML, extracts more abstract features from a larger set of training data mostly without human supervision. RL , being the other sub-division of ML, is inspired by psychology. It provides a software agent which gathers experience based on interactions with the environment through some actions and aims to maximize the cumulative performance 1 . Genetic Algorithm , Fuzzy Logic are also part of artificial intelligence. Machine Learning \u00b6 Artificial intelligence is very vast. Machine learning(ML) is a subset of Artificial Intelligence. Machine learning(ML) is a set of statistical tools to learn from data. The nucleus of ML is in teaching computers how to learn and make predictions from data without necessarily being programmed. Deep Learning \u00b6 Deep learning is a subset of machine learning in which data goes through multiple number of non-linear transformations to obtain an output. \u2018Deep\u2019 refers to many steps in this case. The output of one step is the input for another step, and this is done continuously to get a final output. All these steps are not linear. Seen a photo of a neuron from the human brain? Artificial neural networks are built similarly, with neural nodes connected like a web. Deep learning algorithms require very powerful machines and is very useful in detecting patterns from input data. Data Science \u00b6 Data science has an intersection with artificial intelligence but is not a subset of artificial intelligence. Data science is the study of an aroused curiosity in any given field, the extraction of data from a large source of data related to the question in mind, processing data, analysing and visualising this data, so as to make meaning out of it for IT and business strategies. In simple terms It is understanding and making sense of data. A lot of tools are used in data science. They include statistical tools, probabilistic tools, linear and metric algebra, numerical optimisation and programming. Conclusion \u00b6 Data Science is not fully Artificial intelligence, however portions of Data science intersect with Artificial intelligence. Mufti Mahmud, M. Shamim Kaiser, Amir Hussain, Stefano Vassanelli. 7 Jan 2018. Applications of Deep Learning and Reinforcement Learning to Biological Data \u21a9","title":"overview"},{"location":"#overview","text":"These days, it seems whenever technology is mentioned, there are buzzwords to boot like AI , Data Science , Machine Learning , Deep Learning etc... In order to better understand the concepts above, I would like to clarify those words and their connections.","title":"Overview"},{"location":"#artificial-intelligence","text":"Artificial intelligence (AI) is therefore, based on the idea of the capability of a machine or computer program to think(reason), understand and learn like humans. From the definition of intelligence, we can also say that artificial Intelligence is the study of the possibility of creating machines able to apply knowledge received from data in manipulating the environment. In simple terms Artificial Intelligence is reproducing human intelligence in machines, especially computer systems through learning , reasoning and self-correction. Broadly, AI can be thought to have evolved parallelly in two main directions: Expert Systems and ML . Focusing on the latter, ML extracts features from training dataset(s) and make models with minimal or no human intervention. These models provide predicted outputs based on test data. DL , being a sub-division of ML, extracts more abstract features from a larger set of training data mostly without human supervision. RL , being the other sub-division of ML, is inspired by psychology. It provides a software agent which gathers experience based on interactions with the environment through some actions and aims to maximize the cumulative performance 1 . Genetic Algorithm , Fuzzy Logic are also part of artificial intelligence.","title":"Artificial Intelligence"},{"location":"#machine-learning","text":"Artificial intelligence is very vast. Machine learning(ML) is a subset of Artificial Intelligence. Machine learning(ML) is a set of statistical tools to learn from data. The nucleus of ML is in teaching computers how to learn and make predictions from data without necessarily being programmed.","title":"Machine Learning"},{"location":"#deep-learning","text":"Deep learning is a subset of machine learning in which data goes through multiple number of non-linear transformations to obtain an output. \u2018Deep\u2019 refers to many steps in this case. The output of one step is the input for another step, and this is done continuously to get a final output. All these steps are not linear. Seen a photo of a neuron from the human brain? Artificial neural networks are built similarly, with neural nodes connected like a web. Deep learning algorithms require very powerful machines and is very useful in detecting patterns from input data.","title":"Deep Learning"},{"location":"#data-science","text":"Data science has an intersection with artificial intelligence but is not a subset of artificial intelligence. Data science is the study of an aroused curiosity in any given field, the extraction of data from a large source of data related to the question in mind, processing data, analysing and visualising this data, so as to make meaning out of it for IT and business strategies. In simple terms It is understanding and making sense of data. A lot of tools are used in data science. They include statistical tools, probabilistic tools, linear and metric algebra, numerical optimisation and programming.","title":"Data Science"},{"location":"#conclusion","text":"Data Science is not fully Artificial intelligence, however portions of Data science intersect with Artificial intelligence. Mufti Mahmud, M. Shamim Kaiser, Amir Hussain, Stefano Vassanelli. 7 Jan 2018. Applications of Deep Learning and Reinforcement Learning to Biological Data \u21a9","title":"Conclusion"},{"location":"backup/","text":"Overview \u00b6 These days, it seems whenever technology is mentioned, there are buzzwords to boot like AI , Data Science , Big Data , Machine Learning , Deep Learning etc... In order to better understand the underlying concepts, I would like to clarify those words. Summary (click to reveal) summary the following text looks a bit summary \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k} Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = '087652' ; Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. E(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j E(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j Block Examples $$ E ( \\mathbf {v}, \\mathbf {h} ) = - \\sum _{i,j}w_{ij}v_i h_j - \\sum _i b_i v_i - \\sum _j c_j h_j $$ \\[ 3 < 4 \\] \\begin { align } p(v _ i=1| \\mathbf { h } ) & = \\sigma\\left ( \\sum _ j w _{ ij } h _ j + b _ i \\right ) \\\\ p(h _ j=1| \\mathbf { v } ) & = \\sigma\\left ( \\sum _ i w _{ ij } v _ i + c _ j \\right ) \\end { align } E(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j E(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j 3 < 4 3 < 4 \\begin{align} p(v_i=1|\\mathbf{h}) & = \\sigma\\left(\\sum_j w_{ij}h_j + b_i\\right) \\\\ p(h_j=1|\\mathbf{v}) & = \\sigma\\left(\\sum_i w_{ij}v_i + c_j\\right) \\end{align} \\begin{align} p(v_i=1|\\mathbf{h}) & = \\sigma\\left(\\sum_j w_{ij}h_j + b_i\\right) \\\\ p(h_j=1|\\mathbf{v}) & = \\sigma\\left(\\sum_i w_{ij}v_i + c_j\\right) \\end{align} import tensorflow as tf Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. import tensorflow as tf","title":"Overview"},{"location":"backup/#overview","text":"These days, it seems whenever technology is mentioned, there are buzzwords to boot like AI , Data Science , Big Data , Machine Learning , Deep Learning etc... In order to better understand the underlying concepts, I would like to clarify those words. Summary (click to reveal) summary the following text looks a bit summary \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k}","title":"Overview"},{"location":"backup/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"backup/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = '087652' ; Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. E(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j E(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j Block Examples $$ E ( \\mathbf {v}, \\mathbf {h} ) = - \\sum _{i,j}w_{ij}v_i h_j - \\sum _i b_i v_i - \\sum _j c_j h_j $$ \\[ 3 < 4 \\] \\begin { align } p(v _ i=1| \\mathbf { h } ) & = \\sigma\\left ( \\sum _ j w _{ ij } h _ j + b _ i \\right ) \\\\ p(h _ j=1| \\mathbf { v } ) & = \\sigma\\left ( \\sum _ i w _{ ij } v _ i + c _ j \\right ) \\end { align } E(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j E(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j 3 < 4 3 < 4 \\begin{align} p(v_i=1|\\mathbf{h}) & = \\sigma\\left(\\sum_j w_{ij}h_j + b_i\\right) \\\\ p(h_j=1|\\mathbf{v}) & = \\sigma\\left(\\sum_i w_{ij}v_i + c_j\\right) \\end{align} \\begin{align} p(v_i=1|\\mathbf{h}) & = \\sigma\\left(\\sum_j w_{ij}h_j + b_i\\right) \\\\ p(h_j=1|\\mathbf{v}) & = \\sigma\\left(\\sum_i w_{ij}v_i + c_j\\right) \\end{align} import tensorflow as tf","title":"Project layout"},{"location":"backup/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"backup/#commands_1","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"backup/#project-layout_1","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. import tensorflow as tf","title":"Project layout"},{"location":"ai/es/","text":"Expert Systems \u00b6 Expert systems (ES) are one of the prominent research domains of AI. It is introduced by the researchers at Stanford University, Computer Science Department. The expert systems are the computer applications developed to solve complex problems in a particular domain, at the level of extra-ordinary human intelligence and expertise. Capabilities of Expert Systems \u00b6 The expert systems are capable of: Advising Instructing and assisting human in decision making Demonstrating Deriving a solution Diagnosing Explaining Interpreting input Predicting results Justifying the conclusion Suggesting alternative options to a problem They are incapable of : Substituting human decision makers Possessing human capabilities Producing accurate output for inadequate knowledge base Refining their own knowledge Components of Expert Systems \u00b6 Knowledge Base \u00b6 It contains domain-specific and high-quality knowledge. Knowledge is required to exhibit intelligence. The success of any ES majorly depends upon the collection of highly accurate and precise knowledge. What is Knowledge? \u00b6 The data is collection of facts. The information is organized as data and facts about the task domain. Data, Information , and past experience combined together are termed as knowledge. Components of Knowledge Base \u00b6 The knowledge base of an ES is a store of both, factual and heuristic knowledge. Factual Knowledge : It is the information widely accepted by the Knowledge Engineers and scholars in the task domain. Heuristic Knowledge : It is about practice, accurate judgement, one\u2019s ability of evaluation, and guessing. Knowledge representation \u00b6 It is the method used to organize and formalize the knowledge in the knowledge base. It is in the form of IF-THEN-ELSE rules. Knowledge Acquisition \u00b6 The success of any expert system majorly depends on the quality, completeness, and accuracy of the information stored in the knowledge base. The knowledge base is formed by readings from various experts, scholars, and the Knowledge Engineers. The knowledge engineer is a person with the qualities of empathy, quick learning, and case analyzing skills. He acquires information from subject expert by recording, interviewing, and observing him at work, etc. He then categorizes and organizes the information in a meaningful way, in the form of IF-THEN-ELSE rules, to be used by interference machine. The knowledge engineer also monitors the development of the ES. Inference Engine \u00b6 Use of efficient procedures and rules by the Inference Engine is essential in deducting a correct, flawless solution. In case of knowledge-based ES, the Inference Engine acquires and manipulates the knowledge from the knowledge base to arrive at a particular solution. In case of rule based ES, it: Applies rules repeatedly to the facts, which are obtained from earlier rule application. Adds new knowledge into the knowledge base if required. Resolves rules conflict when multiple rules are applicable to a particular case. To recommend a solution, the Inference Engine uses the following strategies: Forward Chaining or Backward Chaining Forward Chaining \u00b6 It is a strategy of an expert system to answer the question, \u201cWhat can happen next?\u201d Here, the Inference Engine follows the chain of conditions and derivations and finally deduces the outcome. It considers all the facts and rules, and sorts them before concluding to a solution. This strategy is followed for working on conclusion, result, or effect. For example, prediction of share market status as an effect of changes in interest rates. Backward Chaining \u00b6 With this strategy, an expert system finds out the answer to the question, \u201cWhy this happened?\u201d On the basis of what has already happened, the Inference Engine tries to find out which conditions could have happened in the past for this result. This strategy is followed for finding out cause or reason. For example, diagnosis of blood cancer in humans. User Interface \u00b6 User interface provides interaction between user of the ES and the ES itself. It is generally Natural Language Processing so as to be used by the user who is well-versed in the task domain. The user of the ES need not be necessarily an expert in Artificial Intelligence. It explains how the ES has arrived at a particular recommendation. The explanation may appear in the following forms: Natural language displayed on screen. Verbal narrations in natural language. Listing of rule numbers displayed on the screen. The user interface makes it easy to trace the credibility of the deductions.","title":"Expert systems"},{"location":"ai/es/#expert-systems","text":"Expert systems (ES) are one of the prominent research domains of AI. It is introduced by the researchers at Stanford University, Computer Science Department. The expert systems are the computer applications developed to solve complex problems in a particular domain, at the level of extra-ordinary human intelligence and expertise.","title":"Expert Systems"},{"location":"ai/es/#capabilities-of-expert-systems","text":"The expert systems are capable of: Advising Instructing and assisting human in decision making Demonstrating Deriving a solution Diagnosing Explaining Interpreting input Predicting results Justifying the conclusion Suggesting alternative options to a problem They are incapable of : Substituting human decision makers Possessing human capabilities Producing accurate output for inadequate knowledge base Refining their own knowledge","title":"Capabilities of Expert Systems"},{"location":"ai/es/#components-of-expert-systems","text":"","title":"Components of Expert Systems"},{"location":"ai/es/#knowledge-base","text":"It contains domain-specific and high-quality knowledge. Knowledge is required to exhibit intelligence. The success of any ES majorly depends upon the collection of highly accurate and precise knowledge.","title":"Knowledge Base"},{"location":"ai/es/#what-is-knowledge","text":"The data is collection of facts. The information is organized as data and facts about the task domain. Data, Information , and past experience combined together are termed as knowledge.","title":"What is Knowledge?"},{"location":"ai/es/#components-of-knowledge-base","text":"The knowledge base of an ES is a store of both, factual and heuristic knowledge. Factual Knowledge : It is the information widely accepted by the Knowledge Engineers and scholars in the task domain. Heuristic Knowledge : It is about practice, accurate judgement, one\u2019s ability of evaluation, and guessing.","title":"Components of Knowledge Base"},{"location":"ai/es/#knowledge-representation","text":"It is the method used to organize and formalize the knowledge in the knowledge base. It is in the form of IF-THEN-ELSE rules.","title":"Knowledge representation"},{"location":"ai/es/#knowledge-acquisition","text":"The success of any expert system majorly depends on the quality, completeness, and accuracy of the information stored in the knowledge base. The knowledge base is formed by readings from various experts, scholars, and the Knowledge Engineers. The knowledge engineer is a person with the qualities of empathy, quick learning, and case analyzing skills. He acquires information from subject expert by recording, interviewing, and observing him at work, etc. He then categorizes and organizes the information in a meaningful way, in the form of IF-THEN-ELSE rules, to be used by interference machine. The knowledge engineer also monitors the development of the ES.","title":"Knowledge Acquisition"},{"location":"ai/es/#inference-engine","text":"Use of efficient procedures and rules by the Inference Engine is essential in deducting a correct, flawless solution. In case of knowledge-based ES, the Inference Engine acquires and manipulates the knowledge from the knowledge base to arrive at a particular solution. In case of rule based ES, it: Applies rules repeatedly to the facts, which are obtained from earlier rule application. Adds new knowledge into the knowledge base if required. Resolves rules conflict when multiple rules are applicable to a particular case. To recommend a solution, the Inference Engine uses the following strategies: Forward Chaining or Backward Chaining","title":"Inference Engine"},{"location":"ai/es/#forward-chaining","text":"It is a strategy of an expert system to answer the question, \u201cWhat can happen next?\u201d Here, the Inference Engine follows the chain of conditions and derivations and finally deduces the outcome. It considers all the facts and rules, and sorts them before concluding to a solution. This strategy is followed for working on conclusion, result, or effect. For example, prediction of share market status as an effect of changes in interest rates.","title":"Forward Chaining"},{"location":"ai/es/#backward-chaining","text":"With this strategy, an expert system finds out the answer to the question, \u201cWhy this happened?\u201d On the basis of what has already happened, the Inference Engine tries to find out which conditions could have happened in the past for this result. This strategy is followed for finding out cause or reason. For example, diagnosis of blood cancer in humans.","title":"Backward Chaining"},{"location":"ai/es/#user-interface","text":"User interface provides interaction between user of the ES and the ES itself. It is generally Natural Language Processing so as to be used by the user who is well-versed in the task domain. The user of the ES need not be necessarily an expert in Artificial Intelligence. It explains how the ES has arrived at a particular recommendation. The explanation may appear in the following forms: Natural language displayed on screen. Verbal narrations in natural language. Listing of rule numbers displayed on the screen. The user interface makes it easy to trace the credibility of the deductions.","title":"User Interface"},{"location":"ai/fl/","text":"Fuzzy Logic \u00b6 The term fuzzy mean things which are not very clear or vague. In real life, we may come across a situation where we can't decide whether the statement is true or false. At that time, fuzzy logic offers very valuable flexibility for reasoning. We can also consider the uncertainties of any situation. Fuzzy logic algorithm helps to solve a problem after considering all available data. Then it takes the best possible decision for the given the input. The FL method imitates the way of decision making in a human which consider all the possibilities between True and False. When not to use fuzzy logic \u00b6 However, fuzzy logic is never a cure for all. Therefore, it is equally important to understand that where we should not use fuzzy logic. Here, are certain situations when you better not use Fuzzy Logic: If you don't find it convenient to map an input space to an output space Fuzzy logic should not be used when you can use common sense Many controllers can do the fine job without the use of fuzzy logic Fuzzy Logic Systems Architecture \u00b6 Fuzzy Logic architecture has four main parts as shown in the diagram: Rule Base: \u00b6 It contains all the rules and the if-then conditions offered by the experts to control the decision-making system. The recent update in fuzzy theory provides various methods for the design and tuning of fuzzy controllers. This updates significantly reduce the number of the fuzzy set of rules. Fuzzification: \u00b6 Fuzzification step helps to convert inputs. It allows you to convert, crisp numbers into fuzzy sets. Crisp inputs measured by sensors and passed into the control system for further processing. Like Room temperature, pressure, etc. Inference Engine: \u00b6 It helps you to determines the degree of match between fuzzy input and the rules. Based on the % match, it determines which rules need implment according to the given input field. After this, the applied rules are combined to develop the control actions. Defuzzification: \u00b6 At last the Defuzzification process is performed to convert the fuzzy sets into a crisp value. There are many types of techniques available, so you need to select it which is best suited when it is used with an expert system.","title":"Fuzzy Logic"},{"location":"ai/fl/#fuzzy-logic","text":"The term fuzzy mean things which are not very clear or vague. In real life, we may come across a situation where we can't decide whether the statement is true or false. At that time, fuzzy logic offers very valuable flexibility for reasoning. We can also consider the uncertainties of any situation. Fuzzy logic algorithm helps to solve a problem after considering all available data. Then it takes the best possible decision for the given the input. The FL method imitates the way of decision making in a human which consider all the possibilities between True and False.","title":"Fuzzy Logic"},{"location":"ai/fl/#when-not-to-use-fuzzy-logic","text":"However, fuzzy logic is never a cure for all. Therefore, it is equally important to understand that where we should not use fuzzy logic. Here, are certain situations when you better not use Fuzzy Logic: If you don't find it convenient to map an input space to an output space Fuzzy logic should not be used when you can use common sense Many controllers can do the fine job without the use of fuzzy logic","title":"When not to use fuzzy logic"},{"location":"ai/fl/#fuzzy-logic-systems-architecture","text":"Fuzzy Logic architecture has four main parts as shown in the diagram:","title":"Fuzzy Logic Systems Architecture"},{"location":"ai/fl/#rule-base","text":"It contains all the rules and the if-then conditions offered by the experts to control the decision-making system. The recent update in fuzzy theory provides various methods for the design and tuning of fuzzy controllers. This updates significantly reduce the number of the fuzzy set of rules.","title":"Rule Base:"},{"location":"ai/fl/#fuzzification","text":"Fuzzification step helps to convert inputs. It allows you to convert, crisp numbers into fuzzy sets. Crisp inputs measured by sensors and passed into the control system for further processing. Like Room temperature, pressure, etc.","title":"Fuzzification:"},{"location":"ai/fl/#inference-engine","text":"It helps you to determines the degree of match between fuzzy input and the rules. Based on the % match, it determines which rules need implment according to the given input field. After this, the applied rules are combined to develop the control actions.","title":"Inference Engine:"},{"location":"ai/fl/#defuzzification","text":"At last the Defuzzification process is performed to convert the fuzzy sets into a crisp value. There are many types of techniques available, so you need to select it which is best suited when it is used with an expert system.","title":"Defuzzification:"},{"location":"ai/ga/","text":"Genetic Algorithms \u00b6 Genetic algorithm is basically a method that heavily inspired by the process of natural selection to find one of the best solution to a problem . In nature, only the strong one survive , the process of eliminating the weak is called natural selection. Genetic algorithm use that same principle to eliminate the \u201cweak\u201d solutions and finally produce the best solution . It is clear that this process involves 5 main steps . The major step is selection , in this step, nature will select individuals that has strong gene from the initial population, after that they begin to step into the next stage which is crossing . After been through crossing step, they\u2019ll produce childs, we call this step reproduction . a child then mutated to add some variation to the gene and finally moved back into the population . What is fitness \u00b6 The fitness function simply defined is a function which takes a candidate solution to the problem as input and produces as output how \u201cfit\u201d or how \u201cgood\u201d the solution is with respect to the problem in consideration. Selecting the good one \u00b6 Selecting the appropriate entities is what the genetic algorithm selection stage all about. After calculating the fitness score, the next step is to use some mysterious methods to select a list of entities that can later be use to produce a better solution. Although you can create your own way of selecting the fitting solutions, there are some famous methods that you can use: Fitness proportionate selection (wheel selection) Tournament selection Performing crossover \u00b6 Crossover is the stage where selected individuals are combined to form new individuals. Crossover is usually applied in a GA with a high probability - Pc . In crossover stage, you can also invent your own crossover techniques, however, there are also some techniques that you can use: Single-point crossover Two-point crossover Uniform crossover Mutate the child \u00b6 In simple terms, mutation may be defined as a small random tweak in the chromosome, to get a new solution. It is used to maintain and introduce diversity in the genetic population and is usually applied with a low probability - Pm . You can also invent your own mutation techniques, however, there are also some techniques that you can use: Bit Flip Mutation Swap Mutation Scramble Mutation Inversion Mutation The end of the process \u00b6 After mutating the child, it will be joining back with other mutated childs to reform a new population and the whole process start over. the process will stop if a certain solution\u2019s fitness reached the desired fitness , we reach the max generation number or the population become stable .","title":"Genetic Algorithms"},{"location":"ai/ga/#genetic-algorithms","text":"Genetic algorithm is basically a method that heavily inspired by the process of natural selection to find one of the best solution to a problem . In nature, only the strong one survive , the process of eliminating the weak is called natural selection. Genetic algorithm use that same principle to eliminate the \u201cweak\u201d solutions and finally produce the best solution . It is clear that this process involves 5 main steps . The major step is selection , in this step, nature will select individuals that has strong gene from the initial population, after that they begin to step into the next stage which is crossing . After been through crossing step, they\u2019ll produce childs, we call this step reproduction . a child then mutated to add some variation to the gene and finally moved back into the population .","title":"Genetic Algorithms"},{"location":"ai/ga/#what-is-fitness","text":"The fitness function simply defined is a function which takes a candidate solution to the problem as input and produces as output how \u201cfit\u201d or how \u201cgood\u201d the solution is with respect to the problem in consideration.","title":"What is fitness"},{"location":"ai/ga/#selecting-the-good-one","text":"Selecting the appropriate entities is what the genetic algorithm selection stage all about. After calculating the fitness score, the next step is to use some mysterious methods to select a list of entities that can later be use to produce a better solution. Although you can create your own way of selecting the fitting solutions, there are some famous methods that you can use: Fitness proportionate selection (wheel selection) Tournament selection","title":"Selecting the good one"},{"location":"ai/ga/#performing-crossover","text":"Crossover is the stage where selected individuals are combined to form new individuals. Crossover is usually applied in a GA with a high probability - Pc . In crossover stage, you can also invent your own crossover techniques, however, there are also some techniques that you can use: Single-point crossover Two-point crossover Uniform crossover","title":"Performing crossover"},{"location":"ai/ga/#mutate-the-child","text":"In simple terms, mutation may be defined as a small random tweak in the chromosome, to get a new solution. It is used to maintain and introduce diversity in the genetic population and is usually applied with a low probability - Pm . You can also invent your own mutation techniques, however, there are also some techniques that you can use: Bit Flip Mutation Swap Mutation Scramble Mutation Inversion Mutation","title":"Mutate the child"},{"location":"ai/ga/#the-end-of-the-process","text":"After mutating the child, it will be joining back with other mutated childs to reform a new population and the whole process start over. the process will stop if a certain solution\u2019s fitness reached the desired fitness , we reach the max generation number or the population become stable .","title":"The end of the process"},{"location":"ai/history/","text":"History of AI \u00b6 It was in the 1940s when the first manually operated computer system, ENIAC (Electronic Numerical Integrator and Computer), was invented. At that time the word \u201ccomputer\u201d was being used as a name for a human with intensive numerical computation capabilities, so, ENIAC was called a numerical computing machine! Well, you may say it has nothing to do with learning?! WRONG, from the beginning the idea was to build a machine able to emulate human thinking and learning. In the 1950s, we see the first computer game program claiming to be able to beat the checkers world champion. This program helped checkers players a lot in improving their skills! Around the same time, Frank Rosenblatt invented the Perceptron which was a very, very simple classifier but when it was combined in large numbers, in a network, it became a powerful monster. Well, the monster is relative to the time and in that time, it was a real breakthrough. Then we see several years of stagnation of the neural network field due to its difficulties in solving certain problems. Thanks to statistics, machine learning became very famous in the 1990s. The intersection of computer science and statistics gave birth to probabilistic approaches in AI. This shifted the field further toward data-driven approaches. Having large-scale data available, scientists started to build intelligent systems that were able to analyze and learn from large amounts of data. As a highlight, IBM\u2019s Deep Blue system beat the world champion of chess, the grand-master Garry Kasparov. Yeah, I know Kasparov accused IBM of cheating, but this is a piece of history now and Deep Blue is resting peacefully in a museum.","title":"History"},{"location":"ai/history/#history-of-ai","text":"It was in the 1940s when the first manually operated computer system, ENIAC (Electronic Numerical Integrator and Computer), was invented. At that time the word \u201ccomputer\u201d was being used as a name for a human with intensive numerical computation capabilities, so, ENIAC was called a numerical computing machine! Well, you may say it has nothing to do with learning?! WRONG, from the beginning the idea was to build a machine able to emulate human thinking and learning. In the 1950s, we see the first computer game program claiming to be able to beat the checkers world champion. This program helped checkers players a lot in improving their skills! Around the same time, Frank Rosenblatt invented the Perceptron which was a very, very simple classifier but when it was combined in large numbers, in a network, it became a powerful monster. Well, the monster is relative to the time and in that time, it was a real breakthrough. Then we see several years of stagnation of the neural network field due to its difficulties in solving certain problems. Thanks to statistics, machine learning became very famous in the 1990s. The intersection of computer science and statistics gave birth to probabilistic approaches in AI. This shifted the field further toward data-driven approaches. Having large-scale data available, scientists started to build intelligent systems that were able to analyze and learn from large amounts of data. As a highlight, IBM\u2019s Deep Blue system beat the world champion of chess, the grand-master Garry Kasparov. Yeah, I know Kasparov accused IBM of cheating, but this is a piece of history now and Deep Blue is resting peacefully in a museum.","title":"History of AI"},{"location":"ai/ml/","text":"Machine Learning \u00b6 According to Arthur Samuel, Machine Learning algorithms enable the computers to learn from data, and even improve themselves, without being explicitly programmed. Machine learning (ML) is a category of an algorithm that allows software applications to become more accurate in predicting outcomes without being explicitly programmed. The basic premise of machine learning is to build algorithms that can receive input data and use statistical analysis to predict an output while updating outputs as new data becomes available. Types of Machine Learning \u00b6 Machine learning can be classified into 3 types of algorithms: Supervised Learning Unsupervised Learning Reinforcement Learning Overview of Supervised Learning Algorithm \u00b6 In Supervised learning, an AI system is presented with data which is labeled, which means that each data tagged with the correct label. The goal is to approximate the mapping function so well that when you have new input data (x) that you can predict the output variables (Y) for that data. As shown in the above example, we have initially taken some data and marked them as \u2018Spam\u2019 or \u2018Not Spam\u2019. This labeled data is used by the training supervised model, this data is used to train the model. Once it is trained we can test our model by testing it with some test new mails and checking of the model is able to predict the right output. Types of Supervised learning \u00b6 Classification : A classification problem is when the output variable is a category, such as \u201cred\u201d or \u201cblue\u201d or \u201cdisease\u201d and \u201cno disease\u201d. Regression : A regression problem is when the output variable is a real value, such as \u201cdollars\u201d or \u201cweight\u201d. Overview of Unsupervised Learning Algorithm \u00b6 In unsupervised learning, an AI system is presented with unlabeled, uncategorized data and the system\u2019s algorithms act on the data without prior training. The output is dependent upon the coded algorithms. Subjecting a system to unsupervised learning is one way of testing AI. In the above example, we have given some characters to our model which are \u2018Ducks\u2019 and \u2018Not Ducks\u2019. In our training data, we don\u2019t provide any label to the corresponding data. The unsupervised model is able to separate both the characters by looking at the type of data and models the underlying structure or distribution in the data in order to learn more about it. Types of Unsupervised learning \u00b6 Clustering : A clustering problem is where you want to discover the inherent groupings in the data, such as grouping customers by purchasing behavior. Association : An association rule learning problem is where you want to discover rules that describe large portions of your data, such as people that buy X also tend to buy Y. Overview of Reinforcement Learning \u00b6 A reinforcement learning algorithm, or agent, learns by interacting with its environment. The agent receives rewards by performing correctly and penalties for performing incorrectly. The agent learns without intervention from a human by maximizing its reward and minimizing its penalty. It is a type of dynamic programming that trains algorithms using a system of reward and punishment. In the above example, we can see that the agent is given 2 options i.e. a path with water or a path with fire. A reinforcement algorithm works on reward a system i.e. if the agent uses the fire path then the rewards are subtracted and agent tries to learn that it should avoid the fire path. If it had chosen the water path or the safe path then some points would have been added to the reward points, the agent then would try to learn what path is safe and what path isn\u2019t. It is basically leveraging the rewards obtained, the agent improves its environment knowledge to select the next action.","title":"Machine Learning"},{"location":"ai/ml/#machine-learning","text":"According to Arthur Samuel, Machine Learning algorithms enable the computers to learn from data, and even improve themselves, without being explicitly programmed. Machine learning (ML) is a category of an algorithm that allows software applications to become more accurate in predicting outcomes without being explicitly programmed. The basic premise of machine learning is to build algorithms that can receive input data and use statistical analysis to predict an output while updating outputs as new data becomes available.","title":"Machine Learning"},{"location":"ai/ml/#types-of-machine-learning","text":"Machine learning can be classified into 3 types of algorithms: Supervised Learning Unsupervised Learning Reinforcement Learning","title":"Types of Machine Learning"},{"location":"ai/ml/#overview-of-supervised-learning-algorithm","text":"In Supervised learning, an AI system is presented with data which is labeled, which means that each data tagged with the correct label. The goal is to approximate the mapping function so well that when you have new input data (x) that you can predict the output variables (Y) for that data. As shown in the above example, we have initially taken some data and marked them as \u2018Spam\u2019 or \u2018Not Spam\u2019. This labeled data is used by the training supervised model, this data is used to train the model. Once it is trained we can test our model by testing it with some test new mails and checking of the model is able to predict the right output.","title":"Overview of Supervised Learning Algorithm"},{"location":"ai/ml/#types-of-supervised-learning","text":"Classification : A classification problem is when the output variable is a category, such as \u201cred\u201d or \u201cblue\u201d or \u201cdisease\u201d and \u201cno disease\u201d. Regression : A regression problem is when the output variable is a real value, such as \u201cdollars\u201d or \u201cweight\u201d.","title":"Types of Supervised learning"},{"location":"ai/ml/#overview-of-unsupervised-learning-algorithm","text":"In unsupervised learning, an AI system is presented with unlabeled, uncategorized data and the system\u2019s algorithms act on the data without prior training. The output is dependent upon the coded algorithms. Subjecting a system to unsupervised learning is one way of testing AI. In the above example, we have given some characters to our model which are \u2018Ducks\u2019 and \u2018Not Ducks\u2019. In our training data, we don\u2019t provide any label to the corresponding data. The unsupervised model is able to separate both the characters by looking at the type of data and models the underlying structure or distribution in the data in order to learn more about it.","title":"Overview of Unsupervised Learning Algorithm"},{"location":"ai/ml/#types-of-unsupervised-learning","text":"Clustering : A clustering problem is where you want to discover the inherent groupings in the data, such as grouping customers by purchasing behavior. Association : An association rule learning problem is where you want to discover rules that describe large portions of your data, such as people that buy X also tend to buy Y.","title":"Types of Unsupervised learning"},{"location":"ai/ml/#overview-of-reinforcement-learning","text":"A reinforcement learning algorithm, or agent, learns by interacting with its environment. The agent receives rewards by performing correctly and penalties for performing incorrectly. The agent learns without intervention from a human by maximizing its reward and minimizing its penalty. It is a type of dynamic programming that trains algorithms using a system of reward and punishment. In the above example, we can see that the agent is given 2 options i.e. a path with water or a path with fire. A reinforcement algorithm works on reward a system i.e. if the agent uses the fire path then the rewards are subtracted and agent tries to learn that it should avoid the fire path. If it had chosen the water path or the safe path then some points would have been added to the reward points, the agent then would try to learn what path is safe and what path isn\u2019t. It is basically leveraging the rewards obtained, the agent improves its environment knowledge to select the next action.","title":"Overview of Reinforcement Learning"},{"location":"ai/ne/","text":"NeuroEvolution \u00b6 Neuroevolution, is a form of artificial intelligence that uses evolutionary algorithms to generate artificial neural networks (ANN), parameters, topology and rules. Encoding the Neural Network \u00b6 Evolutionary algorithms operate on a population of genotypes (also referred to as genomes). In neuroevolution, a genotype is mapped to a neural network phenotype. This process called \"Encoding\". Direct Encoding \u00b6 A direct encoding will explicitly specify everything about an individual. If it represents a neural network this means that each gene will directly be linked to some node, connection, or property of the network. This can be a binary encoding of 1s and 0s, a graph encoding (linking various nodes by weighted connections), or something even more complex. The point is that there will always be a direct connection between genotype and phenotype that is very obvious and readable. Examples : Connection Matrix Node based encoding Schiffmann node-based encoding Koza node-based encoding Pathway based encoding Neuroevolution of augmenting topologies (NEAT) Simple feedforward network encoding Layer based encoding InDirect Encoding \u00b6 An indirect encoding is the exact opposite. Instead of directly specifying what a structure may look like, indirect encodings tends to specify rules or parameters of processes for creating an individual. As a result, indirect encodings are much more compact. Examples : Lindenmayer systems Matrix rewriting Cellular encoding Cellular graph grammars Note each encoding type is useful for a type of GANN (Genetic Algorithm Neural Network) problem such us finding best weights, train the NN, update the architecture, etc ... Basic algorithm \u00b6 Initialize N random networks to create our population (The encoding problem). Train all the NNs simultaneously or one by one. Calculate the \u201cfitness\u201d (how well it did in that iteration) of each NN. Fitness will be used to increase the chances of a NN \u201creproducing.\u201d Higher the fitness, higher is its chance of reproducing (example of fitness : the training cost of NN \u2192 lowest cost is better). if the optimization criterion is not reached , make a new population Select 2 NN Crossover on them (depending on Encoding) Mutate on them (depending on encoding) go to step 2","title":"Neuro Evolution"},{"location":"ai/ne/#neuroevolution","text":"Neuroevolution, is a form of artificial intelligence that uses evolutionary algorithms to generate artificial neural networks (ANN), parameters, topology and rules.","title":"NeuroEvolution"},{"location":"ai/ne/#encoding-the-neural-network","text":"Evolutionary algorithms operate on a population of genotypes (also referred to as genomes). In neuroevolution, a genotype is mapped to a neural network phenotype. This process called \"Encoding\".","title":"Encoding the Neural Network"},{"location":"ai/ne/#direct-encoding","text":"A direct encoding will explicitly specify everything about an individual. If it represents a neural network this means that each gene will directly be linked to some node, connection, or property of the network. This can be a binary encoding of 1s and 0s, a graph encoding (linking various nodes by weighted connections), or something even more complex. The point is that there will always be a direct connection between genotype and phenotype that is very obvious and readable. Examples : Connection Matrix Node based encoding Schiffmann node-based encoding Koza node-based encoding Pathway based encoding Neuroevolution of augmenting topologies (NEAT) Simple feedforward network encoding Layer based encoding","title":"Direct Encoding"},{"location":"ai/ne/#indirect-encoding","text":"An indirect encoding is the exact opposite. Instead of directly specifying what a structure may look like, indirect encodings tends to specify rules or parameters of processes for creating an individual. As a result, indirect encodings are much more compact. Examples : Lindenmayer systems Matrix rewriting Cellular encoding Cellular graph grammars Note each encoding type is useful for a type of GANN (Genetic Algorithm Neural Network) problem such us finding best weights, train the NN, update the architecture, etc ...","title":"InDirect Encoding"},{"location":"ai/ne/#basic-algorithm","text":"Initialize N random networks to create our population (The encoding problem). Train all the NNs simultaneously or one by one. Calculate the \u201cfitness\u201d (how well it did in that iteration) of each NN. Fitness will be used to increase the chances of a NN \u201creproducing.\u201d Higher the fitness, higher is its chance of reproducing (example of fitness : the training cost of NN \u2192 lowest cost is better). if the optimization criterion is not reached , make a new population Select 2 NN Crossover on them (depending on Encoding) Mutate on them (depending on encoding) go to step 2","title":"Basic algorithm"},{"location":"ai/nn/","text":"Neural Network \u00b6 Neural Networks are a key piece of some of the most successful machine learning algorithms. The development of neural networks have been key to teaching computers to think and understand the world in the way that humans do. Essentially, a neural network emulates the human brain. Brains cells, or neurons, are connected via synapses. This is abstracted as a graph of nodes (neurons) connected by weighted edges (synapses). The human brain consists of 100 billion cells called neurons, connected together by synapses. If sufficient synaptic inputs fire to a neuron, that neuron will also fire. We call this process \u201cthinking\u201d. We can model this process by creating a neural network on a computer. A neural network has input and output neurons, which are connected by weighted synapses. The weights affect how much of the forward propagation goes through the neural network. The weights can then be changed during the back propagation \u2014 this is the part where the neural network is now learning. This process of forward propagation and backward propagation is conducted iteratively on every piece of data in a training data set. The greater the size of the data set and the greater the variety of data set that there is, the more that the neural network will learn, and the better that the neural network will get at predicting outputs. Neurons . A neural network is a graph of neurons. A neuron has inputs and outputs. Similarly, a neural network has inputs and outputs. The inputs and outputs of a neural network are represented by input neurons and output neurons. Input neurons have no predecessor neurons, but do have an output. Similarly, an output neuron has no successor neuron, but does have inputs. Connections and Weights . A neural network consists of connections, each connection transferring the output of a neuron to the input of another neuron. Each connection is assigned a weight. Propagation Function . The propagation function computes the input of a neuron from the outputs of predecessor neurons. The propagation function is leveraged during the forward propagation stage of training. Learning Rule . The learning rule is a function that modifies the weights of the connections. This serves to produce a favored output for a given input for the neural network. The learning rule is leveraged during the backward propagation stage of training. Deep Neural Networks \u00b6 A Deep Neural Network simply has more layers than smaller Neural Networks. A smaller Neural Network might have 1\u20133 layers of neurons. However, a Deep Neural Network (DNN) has more than a few layers of neurons. A DNN might have 20 or 1,000 layers of neurons.","title":"Neural Networks"},{"location":"ai/nn/#neural-network","text":"Neural Networks are a key piece of some of the most successful machine learning algorithms. The development of neural networks have been key to teaching computers to think and understand the world in the way that humans do. Essentially, a neural network emulates the human brain. Brains cells, or neurons, are connected via synapses. This is abstracted as a graph of nodes (neurons) connected by weighted edges (synapses). The human brain consists of 100 billion cells called neurons, connected together by synapses. If sufficient synaptic inputs fire to a neuron, that neuron will also fire. We call this process \u201cthinking\u201d. We can model this process by creating a neural network on a computer. A neural network has input and output neurons, which are connected by weighted synapses. The weights affect how much of the forward propagation goes through the neural network. The weights can then be changed during the back propagation \u2014 this is the part where the neural network is now learning. This process of forward propagation and backward propagation is conducted iteratively on every piece of data in a training data set. The greater the size of the data set and the greater the variety of data set that there is, the more that the neural network will learn, and the better that the neural network will get at predicting outputs. Neurons . A neural network is a graph of neurons. A neuron has inputs and outputs. Similarly, a neural network has inputs and outputs. The inputs and outputs of a neural network are represented by input neurons and output neurons. Input neurons have no predecessor neurons, but do have an output. Similarly, an output neuron has no successor neuron, but does have inputs. Connections and Weights . A neural network consists of connections, each connection transferring the output of a neuron to the input of another neuron. Each connection is assigned a weight. Propagation Function . The propagation function computes the input of a neuron from the outputs of predecessor neurons. The propagation function is leveraged during the forward propagation stage of training. Learning Rule . The learning rule is a function that modifies the weights of the connections. This serves to produce a favored output for a given input for the neural network. The learning rule is leveraged during the backward propagation stage of training.","title":"Neural Network"},{"location":"ai/nn/#deep-neural-networks","text":"A Deep Neural Network simply has more layers than smaller Neural Networks. A smaller Neural Network might have 1\u20133 layers of neurons. However, a Deep Neural Network (DNN) has more than a few layers of neurons. A DNN might have 20 or 1,000 layers of neurons.","title":"Deep Neural Networks"},{"location":"dm/datamining/","text":"Data Mining \u00b6 Tools & packages \u00b6 Weka Tanagra Orange mlxtend Weka Presentation \u00b6 Weka Presentation Decision Tree \u00b6 Weka Decision tree Association rules \u00b6 Association rules - tools comparison Data set : vote Association rules - python Data set : transactions","title":"overview"},{"location":"dm/datamining/#data-mining","text":"","title":"Data Mining"},{"location":"dm/datamining/#tools-packages","text":"Weka Tanagra Orange mlxtend","title":"Tools &amp; packages"},{"location":"dm/datamining/#weka-presentation","text":"Weka Presentation","title":"Weka Presentation"},{"location":"dm/datamining/#decision-tree","text":"Weka Decision tree","title":"Decision Tree"},{"location":"dm/datamining/#association-rules","text":"Association rules - tools comparison Data set : vote Association rules - python Data set : transactions","title":"Association rules"},{"location":"ga/knapsack/","text":"Knapsack Problem \u00b6 The knapsack problem or rucksack problem is a problem in combinatorial optimization: Given a set of items, each with a weight and a value, determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible. It derives its name from the problem faced by someone who is constrained by a fixed-size knapsack and must fill it with the most valuable items. One Dimension knapsack problem \u00b6 from pyeasyga import pyeasyga MaxKnasackWeight = 10 # setup data data = [{ 'name' : 'box1' , 'value' : 4 , 'weight' : 12 }, { 'name' : 'box2' , 'value' : 2 , 'weight' : 1 }, { 'name' : 'box3' , 'value' : 10 , 'weight' : 4 }, { 'name' : 'box4' , 'value' : 1 , 'weight' : 1 }, { 'name' : 'box5' , 'value' : 2 , 'weight' : 2 }] ga = pyeasyga . GeneticAlgorithm ( data ) # initialise the GA with data # define a fitness function def fitness ( individual , data ): values , weights = 0 , 0 for selected , box in zip ( individual , data ): if selected : values += box . get ( 'value' ) weights += box . get ( 'weight' ) if weights > MaxKnasackWeight : values = 0 return values ga . fitness_function = fitness # set the GA's fitness function ga . run () # run the GA print ( ga . best_individual ()) # print the GA's best solution Multi Dimension knapsack problem \u00b6 from pyeasyga import pyeasyga MAX_WEIGHT = 12210 MAX_VOLUME = 12 # setup data (weight, volume, price) data = [( 821 , 0.8 , 118 ), ( 1144 , 1 , 322 ), ( 634 , 0.7 , 166 ), ( 701 , 0.9 , 195 ), ( 291 , 0.9 , 100 ), ( 1702 , 0.8 , 142 ), ( 1633 , 0.7 , 100 ), ( 1086 , 0.6 , 145 ), ( 124 , 0.6 , 100 ), ( 718 , 0.9 , 208 ), ( 976 , 0.6 , 100 ), ( 1438 , 0.7 , 312 ), ( 910 , 1 , 198 ), ( 148 , 0.7 , 171 ), ( 1636 , 0.9 , 117 ), ( 237 , 0.6 , 100 ), ( 771 , 0.9 , 329 ), ( 604 , 0.6 , 391 ), ( 1078 , 0.6 , 100 ), ( 640 , 0.8 , 120 ), ( 1510 , 1 , 188 ), ( 741 , 0.6 , 271 ), ( 1358 , 0.9 , 334 ), ( 1682 , 0.7 , 153 ), ( 993 , 0.7 , 130 ), ( 99 , 0.7 , 100 ), ( 1068 , 0.8 , 154 ), ( 1669 , 1 , 289 )] ga = pyeasyga . GeneticAlgorithm ( data ) # initialise the GA with data ga . population_size = 200 # increase population size to 200 (default value is 50) # define a fitness function def fitness ( individual , data ): weight , volume , price = 0 , 0 , 0 for ( selected , item ) in zip ( individual , data ): if selected : weight += item [ 0 ] volume += item [ 1 ] price += item [ 2 ] if weight > MAX_WEIGHT or volume > MAX_VOLUME : price = 0 return price ga . fitness_function = fitness # set the GA's fitness function ga . run () # run the GA print ( ga . best_individual ()) # print the GA's best solution","title":"Knapsack"},{"location":"ga/knapsack/#knapsack-problem","text":"The knapsack problem or rucksack problem is a problem in combinatorial optimization: Given a set of items, each with a weight and a value, determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible. It derives its name from the problem faced by someone who is constrained by a fixed-size knapsack and must fill it with the most valuable items.","title":"Knapsack Problem"},{"location":"ga/knapsack/#one-dimension-knapsack-problem","text":"from pyeasyga import pyeasyga MaxKnasackWeight = 10 # setup data data = [{ 'name' : 'box1' , 'value' : 4 , 'weight' : 12 }, { 'name' : 'box2' , 'value' : 2 , 'weight' : 1 }, { 'name' : 'box3' , 'value' : 10 , 'weight' : 4 }, { 'name' : 'box4' , 'value' : 1 , 'weight' : 1 }, { 'name' : 'box5' , 'value' : 2 , 'weight' : 2 }] ga = pyeasyga . GeneticAlgorithm ( data ) # initialise the GA with data # define a fitness function def fitness ( individual , data ): values , weights = 0 , 0 for selected , box in zip ( individual , data ): if selected : values += box . get ( 'value' ) weights += box . get ( 'weight' ) if weights > MaxKnasackWeight : values = 0 return values ga . fitness_function = fitness # set the GA's fitness function ga . run () # run the GA print ( ga . best_individual ()) # print the GA's best solution","title":"One Dimension knapsack problem"},{"location":"ga/knapsack/#multi-dimension-knapsack-problem","text":"from pyeasyga import pyeasyga MAX_WEIGHT = 12210 MAX_VOLUME = 12 # setup data (weight, volume, price) data = [( 821 , 0.8 , 118 ), ( 1144 , 1 , 322 ), ( 634 , 0.7 , 166 ), ( 701 , 0.9 , 195 ), ( 291 , 0.9 , 100 ), ( 1702 , 0.8 , 142 ), ( 1633 , 0.7 , 100 ), ( 1086 , 0.6 , 145 ), ( 124 , 0.6 , 100 ), ( 718 , 0.9 , 208 ), ( 976 , 0.6 , 100 ), ( 1438 , 0.7 , 312 ), ( 910 , 1 , 198 ), ( 148 , 0.7 , 171 ), ( 1636 , 0.9 , 117 ), ( 237 , 0.6 , 100 ), ( 771 , 0.9 , 329 ), ( 604 , 0.6 , 391 ), ( 1078 , 0.6 , 100 ), ( 640 , 0.8 , 120 ), ( 1510 , 1 , 188 ), ( 741 , 0.6 , 271 ), ( 1358 , 0.9 , 334 ), ( 1682 , 0.7 , 153 ), ( 993 , 0.7 , 130 ), ( 99 , 0.7 , 100 ), ( 1068 , 0.8 , 154 ), ( 1669 , 1 , 289 )] ga = pyeasyga . GeneticAlgorithm ( data ) # initialise the GA with data ga . population_size = 200 # increase population size to 200 (default value is 50) # define a fitness function def fitness ( individual , data ): weight , volume , price = 0 , 0 , 0 for ( selected , item ) in zip ( individual , data ): if selected : weight += item [ 0 ] volume += item [ 1 ] price += item [ 2 ] if weight > MAX_WEIGHT or volume > MAX_VOLUME : price = 0 return price ga . fitness_function = fitness # set the GA's fitness function ga . run () # run the GA print ( ga . best_individual ()) # print the GA's best solution","title":"Multi Dimension knapsack problem"},{"location":"ga/pyeasyga/","text":"Genetic Algorithm Library : Pyeasyga \u00b6 A simple and easy-to-use implementation of a Genetic Algorithm library in Python. pyeasyga provides a simple interface to the power of Genetic Algorithms (GAs). You don\u2019t have to have expert GA knowledge in order to use it. Homepage: https://github.com/remiomosowon/pyeasyga PyPI: https://pypi.python.org/pypi/pyeasyga Documentation: http://pyeasyga.readthedocs.org . Installation \u00b6 At the command line, simply run: $ pip install pyeasyga Import the modules \u00b6 At the command line, simply run: import random from pyeasyga.pyeasyga import GeneticAlgorithm Setup your data and init the GA (Only data is mandatory) \u00b6 setup data and initialise the GeneticAlgorithm class with the required data parameter, and all or some of the optional parameters data = [( 'orange' , 50 ), ( 'apple' , 35 ), ( 'kiwi' , 40 )] #ga = GeneticAlgorithm(data, 20, 50, 0.8, 0.2, True, True) #ga = GeneticAlgorithm(data) ga = GeneticAlgorithm ( data , population_size = 20 , generations = 50 , crossover_probability = 0.8 , mutation_probability = 0.2 , elitism = True , maximise_fitness = True ) Create the individual (Optional) \u00b6 Optionally, define a function to create a representation of a candidate solution (an individual in GA speak). This function should take in the data defined in step 1. as a parameter. Set the Genetic Algorithm\u2019s create_individual attribute to your defined function def create_individual ( data ): individual = [] for item in data : individual . append ( random . randint ( 0 , 1 )) return individual ga . create_individual = create_individual Genetic Algorithm\u2019s operations (crossover, mutate, selection) (Optional) \u00b6 Optionally, define and set functions for the Genetic Algorithm\u2019s genetic operators (i.e. crossover, mutate, selection) def crossover ( parent_1 , parent_2 ): crossover_index = random . randrange ( 1 , len ( parent_1 )) child_1 = parent_1 [: crossover_index ] + parent_2 [ crossover_index :] child_2 = parent_2 [: crossover_index ] + parent_1 [ crossover_index :] return child_1 , child_2 ga . crossover_function = crossover def mutate ( individual ): mutate_index = random . randrange ( len ( individual )) if individual [ mutate_index ] == 0 : individual [ mutate_index ] = 1 else : individual [ mutate_index ] = 0 ga . mutate_function = mutate def selection ( population ): return random . choice ( population ) ga . selection_function = selection Define the Fitness function (Mandatory) \u00b6 Define a fitness function for the Genetic Algorithm. The function should take two parameters: a candidate solution representation (an individual in GA speak), and the data that is used to help determine the individual\u2019s fitness Set the Genetic Algorithm\u2019s fitness_function attribute to your defined fitness function def fitness ( individual , data ): fitness = 0 if individual . count ( 1 ) == 2 : for ( selected , ( fruit , profit )) in zip ( individual , data ): if selected == 1 : fitness += profit return fitness ga . fitness_function = fitness Run the GA program \u00b6 Run the Genetic Algorithm, Print the best solution, You can also examine all the individuals in the last generation. ga . run () print ( \"the best indivudial : \" , ga . best_individual ()) for individual in ga . last_generation (): print ( individual )","title":"pyeasyga"},{"location":"ga/pyeasyga/#genetic-algorithm-library-pyeasyga","text":"A simple and easy-to-use implementation of a Genetic Algorithm library in Python. pyeasyga provides a simple interface to the power of Genetic Algorithms (GAs). You don\u2019t have to have expert GA knowledge in order to use it. Homepage: https://github.com/remiomosowon/pyeasyga PyPI: https://pypi.python.org/pypi/pyeasyga Documentation: http://pyeasyga.readthedocs.org .","title":"Genetic Algorithm Library : Pyeasyga"},{"location":"ga/pyeasyga/#installation","text":"At the command line, simply run: $ pip install pyeasyga","title":"Installation"},{"location":"ga/pyeasyga/#import-the-modules","text":"At the command line, simply run: import random from pyeasyga.pyeasyga import GeneticAlgorithm","title":"Import the modules"},{"location":"ga/pyeasyga/#setup-your-data-and-init-the-ga-only-data-is-mandatory","text":"setup data and initialise the GeneticAlgorithm class with the required data parameter, and all or some of the optional parameters data = [( 'orange' , 50 ), ( 'apple' , 35 ), ( 'kiwi' , 40 )] #ga = GeneticAlgorithm(data, 20, 50, 0.8, 0.2, True, True) #ga = GeneticAlgorithm(data) ga = GeneticAlgorithm ( data , population_size = 20 , generations = 50 , crossover_probability = 0.8 , mutation_probability = 0.2 , elitism = True , maximise_fitness = True )","title":"Setup your data and init the GA (Only data is mandatory)"},{"location":"ga/pyeasyga/#create-the-individual-optional","text":"Optionally, define a function to create a representation of a candidate solution (an individual in GA speak). This function should take in the data defined in step 1. as a parameter. Set the Genetic Algorithm\u2019s create_individual attribute to your defined function def create_individual ( data ): individual = [] for item in data : individual . append ( random . randint ( 0 , 1 )) return individual ga . create_individual = create_individual","title":"Create the individual (Optional)"},{"location":"ga/pyeasyga/#genetic-algorithms-operations-crossover-mutate-selection-optional","text":"Optionally, define and set functions for the Genetic Algorithm\u2019s genetic operators (i.e. crossover, mutate, selection) def crossover ( parent_1 , parent_2 ): crossover_index = random . randrange ( 1 , len ( parent_1 )) child_1 = parent_1 [: crossover_index ] + parent_2 [ crossover_index :] child_2 = parent_2 [: crossover_index ] + parent_1 [ crossover_index :] return child_1 , child_2 ga . crossover_function = crossover def mutate ( individual ): mutate_index = random . randrange ( len ( individual )) if individual [ mutate_index ] == 0 : individual [ mutate_index ] = 1 else : individual [ mutate_index ] = 0 ga . mutate_function = mutate def selection ( population ): return random . choice ( population ) ga . selection_function = selection","title":"Genetic Algorithm\u2019s operations (crossover, mutate, selection) (Optional)"},{"location":"ga/pyeasyga/#define-the-fitness-function-mandatory","text":"Define a fitness function for the Genetic Algorithm. The function should take two parameters: a candidate solution representation (an individual in GA speak), and the data that is used to help determine the individual\u2019s fitness Set the Genetic Algorithm\u2019s fitness_function attribute to your defined fitness function def fitness ( individual , data ): fitness = 0 if individual . count ( 1 ) == 2 : for ( selected , ( fruit , profit )) in zip ( individual , data ): if selected == 1 : fitness += profit return fitness ga . fitness_function = fitness","title":"Define the Fitness function (Mandatory)"},{"location":"ga/pyeasyga/#run-the-ga-program","text":"Run the Genetic Algorithm, Print the best solution, You can also examine all the individuals in the last generation. ga . run () print ( \"the best indivudial : \" , ga . best_individual ()) for individual in ga . last_generation (): print ( individual )","title":"Run the GA program"},{"location":"ga/queens/","text":"8 Queens Problem \u00b6 The eight queens problem is the problem of placing eight queens on an 8\u00d78 chessboard such that none of them attack one another (no two are in the same row, column, or diagonal). More generally, the n queens problem places n queens on an n\u00d7n chessboard. Solution \u00b6 import random from pyeasyga import pyeasyga # setup seed data seed_data = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 ] # initialise the GA ga = pyeasyga . GeneticAlgorithm ( seed_data , population_size = 200 , generations = 100 , crossover_probability = 0.8 , mutation_probability = 0.2 , elitism = True , maximise_fitness = False ) # define and set function to create a candidate solution representation def create_individual ( data ): individual = data [:] random . shuffle ( individual ) return individual ga . create_individual = create_individual # One Point cross with correction def crossover ( parent_1 , parent_2 ): crossover_index = random . randrange ( 1 , len ( parent_1 )) child_1a = parent_1 [: crossover_index ] child_1b = [ i for i in parent_2 if i not in child_1a ] child_1 = child_1a + child_1b child_2a = parent_2 [ crossover_index :] child_2b = [ i for i in parent_1 if i not in child_2a ] child_2 = child_2a + child_2b return child_1 , child_2 ga . crossover_function = crossover # swap Mutation def mutate ( individual ): mutate_index1 = random . randrange ( len ( individual )) mutate_index2 = random . randrange ( len ( individual )) individual [ mutate_index1 ], individual [ mutate_index2 ] = individual [ mutate_index2 ], individual [ mutate_index1 ] ga . mutate_function = mutate # define and set the GA's selection operation def selection ( population ): return random . choice ( population ) ga . selection_function = selection # define a fitness function def fitness ( individual , data ): collisions = 0 for item in individual : item_index = individual . index ( item ) for elem in individual : elem_index = individual . index ( elem ) if item_index != elem_index : if item - ( elem_index - item_index ) == elem \\ or ( elem_index - item_index ) + item == elem : collisions += 1 return collisions ga . fitness_function = fitness # set the GA's fitness function ga . run () # run the GA # function to print out chess board with queens placed in position def print_board ( board_representation ): def print_x_in_row ( row_length , x_position ): print ( '' ) for _ in range ( row_length ): print ( '------' , end = '' ) print ( ' \\n |' , end = '' ) for i in range ( row_length ): if i == x_position : print ( ' {} |' . format ( 'X' ), end = '' ) else : print ( ' |' , end = '' ) def print_board_bottom ( row_length ): print ( ' \\n ' , end = '' ) for _ in range ( row_length ): print ( '------' , end = '' ) num_of_rows = len ( board_representation ) row_length = num_of_rows #rows == columns in a chessboard for row in range ( num_of_rows ): print_x_in_row ( row_length , board_representation [ row ]) print_board_bottom ( row_length ) print ( ' \\n ' ) # print the GA's best solution; a solution is valid only if there are no collisions if ga . best_individual ()[ 0 ] == 0 : print ( ga . best_individual ()) print_board ( ga . best_individual ()[ 1 ]) else : print ( None )","title":"8 queens"},{"location":"ga/queens/#8-queens-problem","text":"The eight queens problem is the problem of placing eight queens on an 8\u00d78 chessboard such that none of them attack one another (no two are in the same row, column, or diagonal). More generally, the n queens problem places n queens on an n\u00d7n chessboard.","title":"8 Queens Problem"},{"location":"ga/queens/#solution","text":"import random from pyeasyga import pyeasyga # setup seed data seed_data = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 ] # initialise the GA ga = pyeasyga . GeneticAlgorithm ( seed_data , population_size = 200 , generations = 100 , crossover_probability = 0.8 , mutation_probability = 0.2 , elitism = True , maximise_fitness = False ) # define and set function to create a candidate solution representation def create_individual ( data ): individual = data [:] random . shuffle ( individual ) return individual ga . create_individual = create_individual # One Point cross with correction def crossover ( parent_1 , parent_2 ): crossover_index = random . randrange ( 1 , len ( parent_1 )) child_1a = parent_1 [: crossover_index ] child_1b = [ i for i in parent_2 if i not in child_1a ] child_1 = child_1a + child_1b child_2a = parent_2 [ crossover_index :] child_2b = [ i for i in parent_1 if i not in child_2a ] child_2 = child_2a + child_2b return child_1 , child_2 ga . crossover_function = crossover # swap Mutation def mutate ( individual ): mutate_index1 = random . randrange ( len ( individual )) mutate_index2 = random . randrange ( len ( individual )) individual [ mutate_index1 ], individual [ mutate_index2 ] = individual [ mutate_index2 ], individual [ mutate_index1 ] ga . mutate_function = mutate # define and set the GA's selection operation def selection ( population ): return random . choice ( population ) ga . selection_function = selection # define a fitness function def fitness ( individual , data ): collisions = 0 for item in individual : item_index = individual . index ( item ) for elem in individual : elem_index = individual . index ( elem ) if item_index != elem_index : if item - ( elem_index - item_index ) == elem \\ or ( elem_index - item_index ) + item == elem : collisions += 1 return collisions ga . fitness_function = fitness # set the GA's fitness function ga . run () # run the GA # function to print out chess board with queens placed in position def print_board ( board_representation ): def print_x_in_row ( row_length , x_position ): print ( '' ) for _ in range ( row_length ): print ( '------' , end = '' ) print ( ' \\n |' , end = '' ) for i in range ( row_length ): if i == x_position : print ( ' {} |' . format ( 'X' ), end = '' ) else : print ( ' |' , end = '' ) def print_board_bottom ( row_length ): print ( ' \\n ' , end = '' ) for _ in range ( row_length ): print ( '------' , end = '' ) num_of_rows = len ( board_representation ) row_length = num_of_rows #rows == columns in a chessboard for row in range ( num_of_rows ): print_x_in_row ( row_length , board_representation [ row ]) print_board_bottom ( row_length ) print ( ' \\n ' ) # print the GA's best solution; a solution is valid only if there are no collisions if ga . best_individual ()[ 0 ] == 0 : print ( ga . best_individual ()) print_board ( ga . best_individual ()[ 1 ]) else : print ( None )","title":"Solution"},{"location":"ga/simplega/","text":"Simple Genetic Algorithm problem \u00b6 In this first problem, we will apply the GA of Holland without using almost any libraries, just raw python. We will try to achieve a target individual known from the start. Libraries \u00b6 In this problem we will use just the random library import random GA Parameters \u00b6 Every GA problem is based on some mandatory parameters such as Number of genes , Population size , Mutation rate and Crossover rate POPULATION_SIZE = 10 NB_GENES = 10 MUTATION_RATE = 0.2 CROSSING_RATE = 0.7 For this problem we need additional parameters for the selection algorithm and our Target chromosome TARGET_CHROMOSOME = [ 1 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 0 ] TOURNAMENT_SELECTION_SIZE = 4 Chromosome \u00b6 We need to model our Chromosome (individual) by a class, that contain the genes and the fitness class Chromosome : '''Chromosome Init''' def __init__ ( self ): self . genes = [] self . fitness = 0 i = 0 while i < NB_GENES : self . genes . append ( random . randint ( 0 , 1 )) i += 1 '''Chromosome Get Value''' def get_genes ( self ): return self . genes '''Chromosome Fitness''' def get_fitness ( self ): # this init is very important self . fitness = 0 for i in range ( NB_GENES ): if ( self . genes [ i ] == TARGET_CHROMOSOME [ i ]): self . fitness += 1 return self . fitness def __str__ ( self ): return self . genes . __str__ () Population \u00b6 After definig our chromosome, we need to define our Population class. class Population : '''Population Init''' def __init__ ( self , size ): self . chromosomes = [] i = 0 while i < size : self . chromosomes . append ( Chromosome () ) i += 1 self . chromosomes . sort ( key = lambda x : x . get_fitness (), reverse = True ) '''Get All Population Chromosomes''' def get_chromosomes ( self ): return self . chromosomes def print_population ( self , gen_number ): print ( \" \\n -----------------------Generation Summary---------------------------\" ) print ( \"--------------------------------------------------------------------\" ) print ( \"Generation #\" , gen_number , \"| Fittest chromosome fitness:\" , self . get_chromosomes ()[ 0 ] . get_fitness ()) print ( \"Target chromosome\" , TARGET_CHROMOSOME ) print ( \"--------------------------------------------------------------------\" ) i = 0 for x in self . get_chromosomes (): print ( \"Chromosome #\" , i , \" :\" , x , \"| Fitness\" , x . get_fitness ()) i += 1 Genetic Algorithm Core \u00b6 the kernel of the genetic algorithm consist of selecting the good individual, making the crossing and mutate them in order to produce a better generation. All of that goes in our next class called GeneticAlgorithm , contains only static methods (optional), because we don't need an object of GeneticAlgorithm Type. Selection \u00b6 In this Algorithm example, we will use the tournament selection. @staticmethod def select_tournament ( pop ): tournament_pop = Population ( 0 ) i = 0 while i < TOURNAMENT_SELECTION_SIZE : tournament_pop . get_chromosomes () . append ( pop . get_chromosomes ()[ random . randrange ( 0 , POPULATION_SIZE )]) i += 1 tournament_pop . get_chromosomes () . sort ( key = lambda x : x . get_fitness (), reverse = True ) return tournament_pop . get_chromosomes ()[ 0 ] We can define and use another type of selection , which is the Wheel Selection. @staticmethod def select_Wheel ( pop ): partialSum = 0 sumFitness = 0 for chromosome in pop . get_chromosomes (): sumFitness += chromosome . get_fitness () randomShot = random . random () * sumFitness i = - 1 while partialSum < randomShot and i < POPULATION_SIZE - 1 : i += 1 partialSum += pop . get_chromosomes ()[ i ] . get_fitness () return pop . get_chromosomes ()[ i ] CrossOver \u00b6 In this Algorithm example, we will use the One Point crossover. @staticmethod def crossover_chromosomes ( parent1 , parent2 ): if random . random () < CROSSING_RATE : child1 = Chromosome () child2 = Chromosome () '''One Point Cross Over''' index = random . randrange ( 1 , NB_GENES ) child1 . genes = parent1 . get_genes ()[: index ] + parent2 . get_genes ()[ index :] child2 . genes = parent2 . get_genes ()[: index ] + parent1 . get_genes ()[ index :] print ( \" \\n Making a cross\" ) print ( \"Parent1: \" , parent1 . get_genes ()) print ( \"Parent2: \" , parent2 . get_genes ()) print ( \"Child1 : \" , child1 . get_genes ()) print ( \"Child1 : \" , child2 . get_genes ()) return child1 , child2 else : return parent1 , parent2 Mutation \u00b6 In this Algorithm example, we will use the One Bit Flip. @staticmethod def mutate_chromosome ( chromosome ): if random . random () < MUTATION_RATE : print ( \" \\n Making a mutation\" ) print ( \"From: \" , chromosome . get_genes ()) random_bit_position = random . randrange ( 0 , NB_GENES ) if chromosome . get_genes ()[ random_bit_position ] == 0 : chromosome . get_genes ()[ random_bit_position ] = 1 else : chromosome . get_genes ()[ random_bit_position ] = 0 print ( \"To: \" , chromosome . get_genes ()) Evolve the population \u00b6 In this method we will evolve our generation by using the selection, crossover and the mutation. '''Population evolution Cross Over --> Mutation''' @staticmethod def evolve ( pop ): new_pop = Population ( 0 ) #'''Keep The Fittests Chromosomes''' #for i in range(NUMBER_OF_ELITE_CHROMOSOMES): # new_pop.get_chromosomes().append(pop.get_chromosomes()[i]) print ( \" \\n Crossover and Mutation Trace:\" ) while new_pop . get_chromosomes () . __len__ () < POPULATION_SIZE : parent1 = GeneticAlgorithm . select_tournament ( pop ) parent2 = GeneticAlgorithm . select_tournament ( pop ) child1 , child2 = GeneticAlgorithm . crossover_chromosomes ( parent1 , parent2 ) GeneticAlgorithm . mutate_chromosome ( child1 ) GeneticAlgorithm . mutate_chromosome ( child2 ) new_pop . get_chromosomes () . append ( child1 ) # make sure to not depass the population size if we keep the elite if len ( new_pop . get_chromosomes ()) < POPULATION_SIZE : new_pop . get_chromosomes () . append ( child2 ) new_pop . get_chromosomes () . sort ( key = lambda x : x . get_fitness (), reverse = True ) return new_pop Main program \u00b6 After definig all our classes and methods, we will run our main program generation_number = 0 MAX_FITNESS = TARGET_CHROMOSOME . __len__ () population = Population ( POPULATION_SIZE ) population . print_population ( generation_number ) while population . get_chromosomes ()[ 0 ] . get_fitness () < MAX_FITNESS : generation_number += 1 population = GeneticAlgorithm . evolve ( population ) population . print_population ( generation_number )","title":"simple GA algorithm"},{"location":"ga/simplega/#simple-genetic-algorithm-problem","text":"In this first problem, we will apply the GA of Holland without using almost any libraries, just raw python. We will try to achieve a target individual known from the start.","title":"Simple Genetic Algorithm problem"},{"location":"ga/simplega/#libraries","text":"In this problem we will use just the random library import random","title":"Libraries"},{"location":"ga/simplega/#ga-parameters","text":"Every GA problem is based on some mandatory parameters such as Number of genes , Population size , Mutation rate and Crossover rate POPULATION_SIZE = 10 NB_GENES = 10 MUTATION_RATE = 0.2 CROSSING_RATE = 0.7 For this problem we need additional parameters for the selection algorithm and our Target chromosome TARGET_CHROMOSOME = [ 1 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 0 ] TOURNAMENT_SELECTION_SIZE = 4","title":"GA Parameters"},{"location":"ga/simplega/#chromosome","text":"We need to model our Chromosome (individual) by a class, that contain the genes and the fitness class Chromosome : '''Chromosome Init''' def __init__ ( self ): self . genes = [] self . fitness = 0 i = 0 while i < NB_GENES : self . genes . append ( random . randint ( 0 , 1 )) i += 1 '''Chromosome Get Value''' def get_genes ( self ): return self . genes '''Chromosome Fitness''' def get_fitness ( self ): # this init is very important self . fitness = 0 for i in range ( NB_GENES ): if ( self . genes [ i ] == TARGET_CHROMOSOME [ i ]): self . fitness += 1 return self . fitness def __str__ ( self ): return self . genes . __str__ ()","title":"Chromosome"},{"location":"ga/simplega/#population","text":"After definig our chromosome, we need to define our Population class. class Population : '''Population Init''' def __init__ ( self , size ): self . chromosomes = [] i = 0 while i < size : self . chromosomes . append ( Chromosome () ) i += 1 self . chromosomes . sort ( key = lambda x : x . get_fitness (), reverse = True ) '''Get All Population Chromosomes''' def get_chromosomes ( self ): return self . chromosomes def print_population ( self , gen_number ): print ( \" \\n -----------------------Generation Summary---------------------------\" ) print ( \"--------------------------------------------------------------------\" ) print ( \"Generation #\" , gen_number , \"| Fittest chromosome fitness:\" , self . get_chromosomes ()[ 0 ] . get_fitness ()) print ( \"Target chromosome\" , TARGET_CHROMOSOME ) print ( \"--------------------------------------------------------------------\" ) i = 0 for x in self . get_chromosomes (): print ( \"Chromosome #\" , i , \" :\" , x , \"| Fitness\" , x . get_fitness ()) i += 1","title":"Population"},{"location":"ga/simplega/#genetic-algorithm-core","text":"the kernel of the genetic algorithm consist of selecting the good individual, making the crossing and mutate them in order to produce a better generation. All of that goes in our next class called GeneticAlgorithm , contains only static methods (optional), because we don't need an object of GeneticAlgorithm Type.","title":"Genetic Algorithm Core"},{"location":"ga/simplega/#selection","text":"In this Algorithm example, we will use the tournament selection. @staticmethod def select_tournament ( pop ): tournament_pop = Population ( 0 ) i = 0 while i < TOURNAMENT_SELECTION_SIZE : tournament_pop . get_chromosomes () . append ( pop . get_chromosomes ()[ random . randrange ( 0 , POPULATION_SIZE )]) i += 1 tournament_pop . get_chromosomes () . sort ( key = lambda x : x . get_fitness (), reverse = True ) return tournament_pop . get_chromosomes ()[ 0 ] We can define and use another type of selection , which is the Wheel Selection. @staticmethod def select_Wheel ( pop ): partialSum = 0 sumFitness = 0 for chromosome in pop . get_chromosomes (): sumFitness += chromosome . get_fitness () randomShot = random . random () * sumFitness i = - 1 while partialSum < randomShot and i < POPULATION_SIZE - 1 : i += 1 partialSum += pop . get_chromosomes ()[ i ] . get_fitness () return pop . get_chromosomes ()[ i ]","title":"Selection"},{"location":"ga/simplega/#crossover","text":"In this Algorithm example, we will use the One Point crossover. @staticmethod def crossover_chromosomes ( parent1 , parent2 ): if random . random () < CROSSING_RATE : child1 = Chromosome () child2 = Chromosome () '''One Point Cross Over''' index = random . randrange ( 1 , NB_GENES ) child1 . genes = parent1 . get_genes ()[: index ] + parent2 . get_genes ()[ index :] child2 . genes = parent2 . get_genes ()[: index ] + parent1 . get_genes ()[ index :] print ( \" \\n Making a cross\" ) print ( \"Parent1: \" , parent1 . get_genes ()) print ( \"Parent2: \" , parent2 . get_genes ()) print ( \"Child1 : \" , child1 . get_genes ()) print ( \"Child1 : \" , child2 . get_genes ()) return child1 , child2 else : return parent1 , parent2","title":"CrossOver"},{"location":"ga/simplega/#mutation","text":"In this Algorithm example, we will use the One Bit Flip. @staticmethod def mutate_chromosome ( chromosome ): if random . random () < MUTATION_RATE : print ( \" \\n Making a mutation\" ) print ( \"From: \" , chromosome . get_genes ()) random_bit_position = random . randrange ( 0 , NB_GENES ) if chromosome . get_genes ()[ random_bit_position ] == 0 : chromosome . get_genes ()[ random_bit_position ] = 1 else : chromosome . get_genes ()[ random_bit_position ] = 0 print ( \"To: \" , chromosome . get_genes ())","title":"Mutation"},{"location":"ga/simplega/#evolve-the-population","text":"In this method we will evolve our generation by using the selection, crossover and the mutation. '''Population evolution Cross Over --> Mutation''' @staticmethod def evolve ( pop ): new_pop = Population ( 0 ) #'''Keep The Fittests Chromosomes''' #for i in range(NUMBER_OF_ELITE_CHROMOSOMES): # new_pop.get_chromosomes().append(pop.get_chromosomes()[i]) print ( \" \\n Crossover and Mutation Trace:\" ) while new_pop . get_chromosomes () . __len__ () < POPULATION_SIZE : parent1 = GeneticAlgorithm . select_tournament ( pop ) parent2 = GeneticAlgorithm . select_tournament ( pop ) child1 , child2 = GeneticAlgorithm . crossover_chromosomes ( parent1 , parent2 ) GeneticAlgorithm . mutate_chromosome ( child1 ) GeneticAlgorithm . mutate_chromosome ( child2 ) new_pop . get_chromosomes () . append ( child1 ) # make sure to not depass the population size if we keep the elite if len ( new_pop . get_chromosomes ()) < POPULATION_SIZE : new_pop . get_chromosomes () . append ( child2 ) new_pop . get_chromosomes () . sort ( key = lambda x : x . get_fitness (), reverse = True ) return new_pop","title":"Evolve the population"},{"location":"ga/simplega/#main-program","text":"After definig all our classes and methods, we will run our main program generation_number = 0 MAX_FITNESS = TARGET_CHROMOSOME . __len__ () population = Population ( POPULATION_SIZE ) population . print_population ( generation_number ) while population . get_chromosomes ()[ 0 ] . get_fitness () < MAX_FITNESS : generation_number += 1 population = GeneticAlgorithm . evolve ( population ) population . print_population ( generation_number )","title":"Main program"},{"location":"ne/","text":"neuro evolution \u00b6","title":"overview"},{"location":"ne/#neuro-evolution","text":"","title":"neuro evolution"},{"location":"nn/","text":"Aneural networks \u00b6","title":"overview"},{"location":"nn/#aneural-networks","text":"","title":"Aneural networks"},{"location":"slides/introml/","text":"Intro to Machine Learning presentation \u00b6","title":"Intro to machine learning"},{"location":"slides/introml/#intro-to-machine-learning-presentation","text":"","title":"Intro to Machine Learning presentation"},{"location":"slides/ne/","text":"","title":"Neuro-Evolution"},{"location":"slides/nn/","text":"Neural Network presentation \u00b6 Appendix 1 : Logic gates representation \u00b6 Appendix 2 : Training example \u00b6 Appendix 3 : Hyperparameters \u00b6","title":"Neural Network"},{"location":"slides/nn/#neural-network-presentation","text":"","title":"Neural Network presentation"},{"location":"slides/nn/#appendix-1-logic-gates-representation","text":"","title":"Appendix 1 : Logic gates representation"},{"location":"slides/nn/#appendix-2-training-example","text":"","title":"Appendix 2 : Training example"},{"location":"slides/nn/#appendix-3-hyperparameters","text":"","title":"Appendix 3 : Hyperparameters"},{"location":"tools/cheat/","text":"Cheat sheets \u00b6 Machine Learning and Neural Networks \u00b6 Machine Learning cheat cheat with emoji Neural Networks cheat cheat Neural Netwrk Mathematics Part 1 cheat cheat Neural Netwrk Mathematics Part 2 cheat cheat Python and Famous Librairies \u00b6 Python cheat cheat Numpy cheat cheat Pandas cheat cheat SciPy cheat cheat MatPlotLib cheat cheat Deep Learning Librairies \u00b6 Keras cheat cheat TensorFlow cheat cheat","title":"Tools"},{"location":"tools/cheat/#cheat-sheets","text":"","title":"Cheat sheets"},{"location":"tools/cheat/#machine-learning-and-neural-networks","text":"Machine Learning cheat cheat with emoji Neural Networks cheat cheat Neural Netwrk Mathematics Part 1 cheat cheat Neural Netwrk Mathematics Part 2 cheat cheat","title":"Machine Learning and Neural Networks"},{"location":"tools/cheat/#python-and-famous-librairies","text":"Python cheat cheat Numpy cheat cheat Pandas cheat cheat SciPy cheat cheat MatPlotLib cheat cheat","title":"Python and Famous Librairies"},{"location":"tools/cheat/#deep-learning-librairies","text":"Keras cheat cheat TensorFlow cheat cheat","title":"Deep Learning Librairies"},{"location":"web/django/","text":"Django \u00b6 Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design. Built by experienced developers, it takes care of much of the hassle of Web development, so you can focus on writing your app without needing to reinvent the wheel. It\u2019s free and open source. Useful Links: https://www.w3schools.com/Python/default.asp https://docs.djangoproject.com/en/3.0/ https://simpleisbetterthancomplex.com/ https://wsvincent.com/ https://books.agiliq.com/en/latest/README.html https://python.doctor/ Install Django \u00b6 You need python and pip installed in your system In Terminal python --version pip --version pip install django Start a project with Django \u00b6 after you installed django, the django-admin command will be available, try to run your server In Terminal django-admin startproject project_name cd project_name python manage.py runserver 8000 Let\u2019s look at project_name structure. there is only 2 important files here: settings.py : django project setting/configuration urls.py : the table of content, contain routes Create application with Django \u00b6 What\u2019s the difference between a project and an app? An app is a Web application that does something \u2013 e.g., a Weblog system, a database of public records or a small poll app. A project is a collection of configuration and apps for a particular website. A project can contain multiple apps In Terminal python manage.py startapp app_name Structure \u00b6 those are the important files app_name/ __init__.py admin.py apps.py migrations/ __init__.py models.py ---> our data persistance tests.py urls.py ---> where routes lives views.py ---> where views functions goes (controllers) Configuration \u00b6 after creating our app we must add it to the INSTALLED_APPS array in the settings.py of our project INSTALLED_APPS = [ 'django.contrib.admin' , 'django.contrib.auth' , 'django.contrib.contenttypes' , 'django.contrib.sessions' , 'django.contrib.messages' , 'django.contrib.staticfiles' , 'app_name' , #<--------> add this ] In Terminal mkdir templates # in settings.py # in TEMPLATES list # we must set the proprety DIRS like this 'DIRS' : [ os . path . join ( BASE_DIR , 'templates' )] the best practices says : for every app we have: make sure to create a folder with the app_name under templates views \u00b6 django view can return 3 things HttpResponse, JsonResponse or a html page, lets create those 3 types #in views.py of the application from django.http import HttpResponse , JsonResponse from django.shortcuts import render def example_http ( request ): return HttpResponse ( \"hello from your example app\" ) def example_http_with_param ( request , id ): return HttpResponse ( \"hello from your example app with id = {}\" . format ( id )) def example_json ( request ): data = [ { 'id' : 1 , 'name' : 'example1' }, { 'id' : 2 , 'name' : 'example2' } ] return JsonResponse ( data , safe = False ) def example_html ( request ): return render ( request , 'exampleapp/example.html' ) routes \u00b6 to access your views you must add routes a route for eath view #in urls.py of the application from django.urls import path from . import views app_name = 'exampleapp' urlpatterns = [ path ( 'http/' , views . example_http , name = 'http_example' ), path ( 'http/<int:id>/' , views . example_http_with_param , name = 'http_example_with_param' ), path ( 'json/' , views . example_json , name = 'json_example' ), path ( 'html/' , views . example_html , name = 'html_example' ), ] until now our views are not accessible, we must plug the project routes with the application route. #in urls.py of the project from django.urls import include # add this import path ( 'example/' , include ( 'exampleapp.urls' )), # add this line Get your hands dirty with templates \u00b6 Configuration \u00b6 we must configure the static folder # in settings.py STATIC_URL = '/static/' STATICFILES_DIRS = [ os . path . join ( BASE_DIR , \"static\" ),] # in urls.py of the project from django.conf import settings from django.conf.urls.static import static urlpatterns = [ # ... the rest of your URLconf goes here ... ] + static ( settings . STATIC_URL , document_root = settings . STATIC_ROOT ) #in templates { % load static % } < img src = \"{ % s tatic \" my_app / example . jpg \" %}\" alt = \"My image\" > Data and templates \u00b6 we need to pass data to our template first def example_html ( request ): dictionary = { 'display' : True , 'students' : [ { 'fullname' : 'flen ben flen 1' , 'level' : 1 }, { 'fullname' : 'flen ben flen 2' , 'level' : 2 }, { 'fullname' : 'flen ben flen 3' , 'level' : 3 } ] } return render ( request , 'exampleapp/example.html' , dictionary ) then we can use it in the html {% if display == True %} < ul > {% for student in students %} < li > {{ student.fullname }} - {{ student.level }} </ li > {% endfor %} </ ul > {% endif %} paths in templates \u00b6 to make links between pages we must use the routes already created < a href = \"{% url 'app_name:route_name' route_param %}\" > click here </ a > < a href = \"{% url 'exampleapp:http_example' %}\" > click here </ a > < a href = \"{% url 'exampleapp:http_example_with_param' id %}\" > click here </ a > < a href = \"{% url 'exampleapp:json_example' %}\" > click here </ a > < a href = \"{% url 'exampleapp:html_example' %}\" > click here </ a > Template inheritance \u00b6 inheritance of template is used to avaoid code duplication, and clean your code first of all you must set the layout (a htmlpage with blocks) that you will extend <!DOCTYPE html> < html lang = \"en\" > < head > < title > {% block title %}{% endblock %} </ title > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > {% load static %} < link rel = \"stylesheet\" href = \"{% static \" css / bootstrap . min . css \" %}\" > < link rel = \"stylesheet\" href = \"{% static \" css / yeti . min . css \" %}\" > {% block stylesheets %}{% endblock %} </ head > < body > {% block content %}{% endblock %} < script src = \"{% static \" js / jquery . min . js \" %}\" ></ script > < script src = \"{% static \" js / popper . min . js \" %}\" ></ script > < script src = \"{% static \" js / bootstrap . min . js \" %}\" ></ script > {% block javascript %}{% endblock %} </ body > </ html > and then create a page that extend the layout {% extends 'layout.html' %} {% block title %}Example app{% endblock %} {% block content %} < div class = \"container mt-5\" > < h1 > Hello World </ h1 > </ div > {% endblock %} Django data \u00b6 django come with a strong ORM (object-relational-mapping) in this section we will use it. models \u00b6 this link contain all the possible fields of any model ( https://docs.djangoproject.com/en/3.0/topics/db/models/ ) #example of a model from django.db import models class Event ( models . Model ): name = models . CharField ( max_length = 120 , null = False , blank = False ) event_date = models . DateTimeField ( null = False , blank = False ) venue = models . CharField ( max_length = 120 , null = False , blank = False ) description = models . TextField ( null = False , blank = False ) models relations \u00b6 This link contain all the possible models relations ( https://hackernoon.com/django-orm-relationships-cheat-sheet-14433d6cf68c ) migrations \u00b6 In Terminal python manage.py makemigrations python manage.py migrate ORM methods \u00b6 in general the orm methods will be used in our views to get data from the DB and pass it to the templates #get many Model . objects . all () Model . objects . filter ( Field = Value ) #get One Model . objects . get ( id = 1 ) Model . objects . get ( pk = 1 ) Model . objects . get ( field = Value ) #save a record d = Model ( field = Value , Field = Value ) #here you must set the mandatory fields d . save () #update a record d . field = Value d . save () #delete a record d2 = Model . objects . get ( pk = 1 ) d2 . delete () #count Model . objects . all () . count () users and admin site \u00b6 django came with a predefined Back-office which is the admin site. in the admin site we must add our models that need to be managed # in the admin.py of our application from .models import Event #import your model admin . site . register ( Event ) # register your model but the admin site need to be managed by a user, so we need our superadmin user In Terminal python manage.py createsuperuser Django form \u00b6 handling from is very easy in django, simply you must create a form in the template and then recieve the fields in a view < form action = \"{% url 'app_name:route_name' %}\" method = \"post\" > {% csrf_token %} < input type = \"text\" name = \"x\" value = \"\" placeholder = \"add an x\" > < input type = \"submit\" value = \"Add\" > </ form > #import reverse from django.urls #import HttpResponseRedirect from django.http def add ( request ): x = request . POST . get ( 'x' ) return HttpResponseRedirect ( reverse ( 'app_name:route_name' , args = ( x ,))) #args is mandatory if the route have paramaters Django users and authentication \u00b6 here are some useful links for the users and authentication system Login_tutorial : https://wsvincent.com/django-user-authentication-tutorial-login-and-logout/ Login tutorial 2 : https://python.doctor/page-django-login-authentification-de-base-apprendre-creer-cours-tutoriel-python Login tutorial 3 : https://simpleisbetterthancomplex.com/tutorial/2016/06/27/how-to-use-djangos-built-in-login-system.html Login tutorial 4 : https://pythonprogramming.net/user-login-logout-django-tutorial/ Auth system : https://wsvincent.com/django-allauth-tutorial-custom-user-model/ Modify the user model : https://wsvincent.com/django-custom-user-model-tutorial/ Modify the user model 2 : https://simpleisbetterthancomplex.com/tutorial/2018/01/18/how-to-implement-multiple-user-types-with-django.html customize the form object : https://stackoverflow.com/questions/7769805/editing-django-form-as-p customize the form object 2 : https://simpleisbetterthancomplex.com/article/2017/08/19/how-to-render-django-form-manually.html authentication Example \u00b6 here a sample of code: our authentication system based on the user model of django if the user is_staff so he will be redirected to admin_portal, if the user is_not_staff he will be redirected to the club_portal first of all we need our routes from django.urls import path from . import views urlpatterns = [ path ( '' , views . index , name = 'index' ), # route for the authentication page path ( 'club/' , views . club , name = 'club_portal' ), # route for the club space path ( 'admin/' , views . admin , name = 'admin_portal' ), # route for the admin space path ( 'login/' , views . login_view , name = 'login' ), # route for login path ( 'logout/' , views . logout_view , name = 'logout' ), # route for logout ] then we must code our views from django.contrib.auth import authenticate , login , logout from django.http import HttpResponseRedirect from django.shortcuts import render from django.urls import reverse def index ( request ): if request . user . is_authenticated : # we test if the user already authenticated if request . user . is_staff : # make redirection based on is_staff or not return HttpResponseRedirect ( reverse ( 'admin_portal' , args = ())) elif not request . user . is_staff : return HttpResponseRedirect ( reverse ( 'club_portal' , args = ())) else : # if the user not authenticated, we must show him the login page return render ( request , 'login.html' ) def login_view ( request ): # get the form params username = request . POST . get ( 'username' , False ) password = request . POST . get ( 'password' , False ) user = authenticate ( username = username , password = password ) #autheticate if user is not None and user . is_active : # if the authetication goes well and the user is active login ( request , user ) # do the login in django sytem # make redirection based on user is_staff or not # if is_staff --> admin page # if not is_staff --> club page # otherwise --> login page if user . is_staff : return HttpResponseRedirect ( reverse ( 'admin_portal' , args = ())) elif not user . is_staff : return HttpResponseRedirect ( reverse ( 'club_portal' , args = ())) else : return render ( request , 'login.html' ) def logout_view ( request ): logout ( request ) return render ( request , 'login.html' ) def club ( request ): return render ( request , 'club.html' ) def admin ( request ): return render ( request , 'admin.html' ) and finally our html pages <!--login page--> < form method = \"post\" role = \"form\" action = \"{% url 'login' %}\" > {% csrf_token %} < input type = \"text\" name = \"username\" placeholder = \"Utilisateur\" > < input type = \"password\" name = \"password\" placeholder = \"Mot de passe\" > < input type = \"submit\" value = \"login\" /> </ form > <!--club portal--> {% if user.is_authenticated and not user.is_staff %} Hi {{ user.username }}!, you are a club < br > < a href = \"{% url 'logout' %}\" > logout </ a > {% else %} < p > You are not logged in </ p > < a href = \"{% url 'index' %}\" > login from here </ a > {% endif %} <!--admin portal--> {% if user.is_authenticated and user.is_staff %} Hi {{ user.username }}!, you are administrator < br > < a href = \"{% url 'logout' %}\" > logout </ a > {% else %} < p > You are not logged in </ p > < a href = \"{% url 'index' %}\" > login from here </ a > {% endif %}","title":"Django"},{"location":"web/django/#django","text":"Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design. Built by experienced developers, it takes care of much of the hassle of Web development, so you can focus on writing your app without needing to reinvent the wheel. It\u2019s free and open source. Useful Links: https://www.w3schools.com/Python/default.asp https://docs.djangoproject.com/en/3.0/ https://simpleisbetterthancomplex.com/ https://wsvincent.com/ https://books.agiliq.com/en/latest/README.html https://python.doctor/","title":"Django"},{"location":"web/django/#install-django","text":"You need python and pip installed in your system In Terminal python --version pip --version pip install django","title":"Install Django"},{"location":"web/django/#start-a-project-with-django","text":"after you installed django, the django-admin command will be available, try to run your server In Terminal django-admin startproject project_name cd project_name python manage.py runserver 8000 Let\u2019s look at project_name structure. there is only 2 important files here: settings.py : django project setting/configuration urls.py : the table of content, contain routes","title":"Start a project with Django"},{"location":"web/django/#create-application-with-django","text":"What\u2019s the difference between a project and an app? An app is a Web application that does something \u2013 e.g., a Weblog system, a database of public records or a small poll app. A project is a collection of configuration and apps for a particular website. A project can contain multiple apps In Terminal python manage.py startapp app_name","title":"Create application with Django"},{"location":"web/django/#structure","text":"those are the important files app_name/ __init__.py admin.py apps.py migrations/ __init__.py models.py ---> our data persistance tests.py urls.py ---> where routes lives views.py ---> where views functions goes (controllers)","title":"Structure"},{"location":"web/django/#configuration","text":"after creating our app we must add it to the INSTALLED_APPS array in the settings.py of our project INSTALLED_APPS = [ 'django.contrib.admin' , 'django.contrib.auth' , 'django.contrib.contenttypes' , 'django.contrib.sessions' , 'django.contrib.messages' , 'django.contrib.staticfiles' , 'app_name' , #<--------> add this ] In Terminal mkdir templates # in settings.py # in TEMPLATES list # we must set the proprety DIRS like this 'DIRS' : [ os . path . join ( BASE_DIR , 'templates' )] the best practices says : for every app we have: make sure to create a folder with the app_name under templates","title":"Configuration"},{"location":"web/django/#views","text":"django view can return 3 things HttpResponse, JsonResponse or a html page, lets create those 3 types #in views.py of the application from django.http import HttpResponse , JsonResponse from django.shortcuts import render def example_http ( request ): return HttpResponse ( \"hello from your example app\" ) def example_http_with_param ( request , id ): return HttpResponse ( \"hello from your example app with id = {}\" . format ( id )) def example_json ( request ): data = [ { 'id' : 1 , 'name' : 'example1' }, { 'id' : 2 , 'name' : 'example2' } ] return JsonResponse ( data , safe = False ) def example_html ( request ): return render ( request , 'exampleapp/example.html' )","title":"views"},{"location":"web/django/#routes","text":"to access your views you must add routes a route for eath view #in urls.py of the application from django.urls import path from . import views app_name = 'exampleapp' urlpatterns = [ path ( 'http/' , views . example_http , name = 'http_example' ), path ( 'http/<int:id>/' , views . example_http_with_param , name = 'http_example_with_param' ), path ( 'json/' , views . example_json , name = 'json_example' ), path ( 'html/' , views . example_html , name = 'html_example' ), ] until now our views are not accessible, we must plug the project routes with the application route. #in urls.py of the project from django.urls import include # add this import path ( 'example/' , include ( 'exampleapp.urls' )), # add this line","title":"routes"},{"location":"web/django/#get-your-hands-dirty-with-templates","text":"","title":"Get your hands dirty with templates"},{"location":"web/django/#configuration_1","text":"we must configure the static folder # in settings.py STATIC_URL = '/static/' STATICFILES_DIRS = [ os . path . join ( BASE_DIR , \"static\" ),] # in urls.py of the project from django.conf import settings from django.conf.urls.static import static urlpatterns = [ # ... the rest of your URLconf goes here ... ] + static ( settings . STATIC_URL , document_root = settings . STATIC_ROOT ) #in templates { % load static % } < img src = \"{ % s tatic \" my_app / example . jpg \" %}\" alt = \"My image\" >","title":"Configuration"},{"location":"web/django/#data-and-templates","text":"we need to pass data to our template first def example_html ( request ): dictionary = { 'display' : True , 'students' : [ { 'fullname' : 'flen ben flen 1' , 'level' : 1 }, { 'fullname' : 'flen ben flen 2' , 'level' : 2 }, { 'fullname' : 'flen ben flen 3' , 'level' : 3 } ] } return render ( request , 'exampleapp/example.html' , dictionary ) then we can use it in the html {% if display == True %} < ul > {% for student in students %} < li > {{ student.fullname }} - {{ student.level }} </ li > {% endfor %} </ ul > {% endif %}","title":"Data and templates"},{"location":"web/django/#paths-in-templates","text":"to make links between pages we must use the routes already created < a href = \"{% url 'app_name:route_name' route_param %}\" > click here </ a > < a href = \"{% url 'exampleapp:http_example' %}\" > click here </ a > < a href = \"{% url 'exampleapp:http_example_with_param' id %}\" > click here </ a > < a href = \"{% url 'exampleapp:json_example' %}\" > click here </ a > < a href = \"{% url 'exampleapp:html_example' %}\" > click here </ a >","title":"paths in templates"},{"location":"web/django/#template-inheritance","text":"inheritance of template is used to avaoid code duplication, and clean your code first of all you must set the layout (a htmlpage with blocks) that you will extend <!DOCTYPE html> < html lang = \"en\" > < head > < title > {% block title %}{% endblock %} </ title > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > {% load static %} < link rel = \"stylesheet\" href = \"{% static \" css / bootstrap . min . css \" %}\" > < link rel = \"stylesheet\" href = \"{% static \" css / yeti . min . css \" %}\" > {% block stylesheets %}{% endblock %} </ head > < body > {% block content %}{% endblock %} < script src = \"{% static \" js / jquery . min . js \" %}\" ></ script > < script src = \"{% static \" js / popper . min . js \" %}\" ></ script > < script src = \"{% static \" js / bootstrap . min . js \" %}\" ></ script > {% block javascript %}{% endblock %} </ body > </ html > and then create a page that extend the layout {% extends 'layout.html' %} {% block title %}Example app{% endblock %} {% block content %} < div class = \"container mt-5\" > < h1 > Hello World </ h1 > </ div > {% endblock %}","title":"Template inheritance"},{"location":"web/django/#django-data","text":"django come with a strong ORM (object-relational-mapping) in this section we will use it.","title":"Django data"},{"location":"web/django/#models","text":"this link contain all the possible fields of any model ( https://docs.djangoproject.com/en/3.0/topics/db/models/ ) #example of a model from django.db import models class Event ( models . Model ): name = models . CharField ( max_length = 120 , null = False , blank = False ) event_date = models . DateTimeField ( null = False , blank = False ) venue = models . CharField ( max_length = 120 , null = False , blank = False ) description = models . TextField ( null = False , blank = False )","title":"models"},{"location":"web/django/#models-relations","text":"This link contain all the possible models relations ( https://hackernoon.com/django-orm-relationships-cheat-sheet-14433d6cf68c )","title":"models relations"},{"location":"web/django/#migrations","text":"In Terminal python manage.py makemigrations python manage.py migrate","title":"migrations"},{"location":"web/django/#orm-methods","text":"in general the orm methods will be used in our views to get data from the DB and pass it to the templates #get many Model . objects . all () Model . objects . filter ( Field = Value ) #get One Model . objects . get ( id = 1 ) Model . objects . get ( pk = 1 ) Model . objects . get ( field = Value ) #save a record d = Model ( field = Value , Field = Value ) #here you must set the mandatory fields d . save () #update a record d . field = Value d . save () #delete a record d2 = Model . objects . get ( pk = 1 ) d2 . delete () #count Model . objects . all () . count ()","title":"ORM methods"},{"location":"web/django/#users-and-admin-site","text":"django came with a predefined Back-office which is the admin site. in the admin site we must add our models that need to be managed # in the admin.py of our application from .models import Event #import your model admin . site . register ( Event ) # register your model but the admin site need to be managed by a user, so we need our superadmin user In Terminal python manage.py createsuperuser","title":"users and admin site"},{"location":"web/django/#django-form","text":"handling from is very easy in django, simply you must create a form in the template and then recieve the fields in a view < form action = \"{% url 'app_name:route_name' %}\" method = \"post\" > {% csrf_token %} < input type = \"text\" name = \"x\" value = \"\" placeholder = \"add an x\" > < input type = \"submit\" value = \"Add\" > </ form > #import reverse from django.urls #import HttpResponseRedirect from django.http def add ( request ): x = request . POST . get ( 'x' ) return HttpResponseRedirect ( reverse ( 'app_name:route_name' , args = ( x ,))) #args is mandatory if the route have paramaters","title":"Django form"},{"location":"web/django/#django-users-and-authentication","text":"here are some useful links for the users and authentication system Login_tutorial : https://wsvincent.com/django-user-authentication-tutorial-login-and-logout/ Login tutorial 2 : https://python.doctor/page-django-login-authentification-de-base-apprendre-creer-cours-tutoriel-python Login tutorial 3 : https://simpleisbetterthancomplex.com/tutorial/2016/06/27/how-to-use-djangos-built-in-login-system.html Login tutorial 4 : https://pythonprogramming.net/user-login-logout-django-tutorial/ Auth system : https://wsvincent.com/django-allauth-tutorial-custom-user-model/ Modify the user model : https://wsvincent.com/django-custom-user-model-tutorial/ Modify the user model 2 : https://simpleisbetterthancomplex.com/tutorial/2018/01/18/how-to-implement-multiple-user-types-with-django.html customize the form object : https://stackoverflow.com/questions/7769805/editing-django-form-as-p customize the form object 2 : https://simpleisbetterthancomplex.com/article/2017/08/19/how-to-render-django-form-manually.html","title":"Django users and authentication"},{"location":"web/django/#authentication-example","text":"here a sample of code: our authentication system based on the user model of django if the user is_staff so he will be redirected to admin_portal, if the user is_not_staff he will be redirected to the club_portal first of all we need our routes from django.urls import path from . import views urlpatterns = [ path ( '' , views . index , name = 'index' ), # route for the authentication page path ( 'club/' , views . club , name = 'club_portal' ), # route for the club space path ( 'admin/' , views . admin , name = 'admin_portal' ), # route for the admin space path ( 'login/' , views . login_view , name = 'login' ), # route for login path ( 'logout/' , views . logout_view , name = 'logout' ), # route for logout ] then we must code our views from django.contrib.auth import authenticate , login , logout from django.http import HttpResponseRedirect from django.shortcuts import render from django.urls import reverse def index ( request ): if request . user . is_authenticated : # we test if the user already authenticated if request . user . is_staff : # make redirection based on is_staff or not return HttpResponseRedirect ( reverse ( 'admin_portal' , args = ())) elif not request . user . is_staff : return HttpResponseRedirect ( reverse ( 'club_portal' , args = ())) else : # if the user not authenticated, we must show him the login page return render ( request , 'login.html' ) def login_view ( request ): # get the form params username = request . POST . get ( 'username' , False ) password = request . POST . get ( 'password' , False ) user = authenticate ( username = username , password = password ) #autheticate if user is not None and user . is_active : # if the authetication goes well and the user is active login ( request , user ) # do the login in django sytem # make redirection based on user is_staff or not # if is_staff --> admin page # if not is_staff --> club page # otherwise --> login page if user . is_staff : return HttpResponseRedirect ( reverse ( 'admin_portal' , args = ())) elif not user . is_staff : return HttpResponseRedirect ( reverse ( 'club_portal' , args = ())) else : return render ( request , 'login.html' ) def logout_view ( request ): logout ( request ) return render ( request , 'login.html' ) def club ( request ): return render ( request , 'club.html' ) def admin ( request ): return render ( request , 'admin.html' ) and finally our html pages <!--login page--> < form method = \"post\" role = \"form\" action = \"{% url 'login' %}\" > {% csrf_token %} < input type = \"text\" name = \"username\" placeholder = \"Utilisateur\" > < input type = \"password\" name = \"password\" placeholder = \"Mot de passe\" > < input type = \"submit\" value = \"login\" /> </ form > <!--club portal--> {% if user.is_authenticated and not user.is_staff %} Hi {{ user.username }}!, you are a club < br > < a href = \"{% url 'logout' %}\" > logout </ a > {% else %} < p > You are not logged in </ p > < a href = \"{% url 'index' %}\" > login from here </ a > {% endif %} <!--admin portal--> {% if user.is_authenticated and user.is_staff %} Hi {{ user.username }}!, you are administrator < br > < a href = \"{% url 'logout' %}\" > logout </ a > {% else %} < p > You are not logged in </ p > < a href = \"{% url 'index' %}\" > login from here </ a > {% endif %}","title":"authentication Example"}]}